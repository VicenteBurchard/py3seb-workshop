{"version":2,"kind":"Notebook","sha256":"1be667968b6102099a3bf5ab319fa24c470b765e6362199c61c2422cb37aaed8","slug":"biophysical-traits-rtm","location":"/302-Biophysical_Traits_RTM.ipynb","dependencies":[],"frontmatter":{"title":"Estimating biophysical traits using RTM inversion","short_title":"Bio_RTM","subtitle":"Notebook to retrieve biophysical traits from satellite imagery","keywords":["TSEB","3SEB","Copernicus","Satellite"],"authors":[{"nameParsed":{"literal":"Vicente Burchard-Levine","given":"Vicente","family":"Burchard-Levine"},"name":"Vicente Burchard-Levine","orcid":"0000-0003-0222-8706","email":"vburchard@ica.csic.es","affiliations":["SpecLab-CSIC"],"id":"contributors-302-Biophysical_Traits_RTM-generated-uid-0","corresponding":true},{"nameParsed":{"literal":"Héctor Nieto","given":"Héctor","family":"Nieto"},"name":"Héctor Nieto","orcid":"0000-0003-4250-6424","email":"hector.nieto@ica.csic.es","affiliations":["ICA-CSIC"],"id":"contributors-302-Biophysical_Traits_RTM-generated-uid-1"}],"affiliations":[{"id":"SpecLab-CSIC","name":"SpecLab-CSIC"},{"id":"ICA-CSIC","name":"ICA-CSIC"}],"license":{"content":{"id":"CC-BY-SA-4.0","url":"https://creativecommons.org/licenses/by-sa/4.0/","name":"Creative Commons Attribution Share Alike 4.0 International","free":true,"CC":true}},"subject":"Tutorial","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"open_access":false,"github":"https://github.com/VicenteBurchard/py3SEB-workshop","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/VicenteBurchard/py3SEB-workshop/blob/master/302-Biophysical_Traits_RTM.ipynb","thumbnail":"/Biophysical_processo-e7ec76079b182e0d4ca76da9922cb913.png","thumbnailOptimized":"/Biophysical_processo-e7ec76079b182e0d4ca76da9922cb913.webp","exports":[{"format":"ipynb","filename":"302-Biophysical_Traits_RTM.ipynb","url":"/302-Biophysical_Trai-3435ae2170718e8af9b1dede344cc25f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RXSEgEzVF1"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"mAAAdEdast"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Interactive jupyter notebook demonstrating the retrieval of biophysical variables by inverting a Radiative Transfer Model (RTM) using a hybrid appraoch, showing its applicability with Sentinel-2 imagery.\nThis notebook will go through:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ecHgi8NnP8"}],"key":"FXXVUH8xmY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Builing synthetic Lool-up-Table (LUT) with pypro4sail","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"YkqxdAMWgE"}],"key":"U1t5XsGM6l"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Training Random Forest algorithm with LUT","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"DYgKr6lIa9"}],"key":"xXKyHF6ge9"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Evaluating Random Forest algorithm to estimate biophysical traits.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CQDJmOYkMy"}],"key":"BNPf6KmWug"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Inversion of Sentinel-2 bands to retrieve biophysical traits","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"OjQAavORYj"}],"key":"UjbJzAsYgG"}],"key":"gIpA5Xp84B"},{"type":"heading","depth":2,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Instructions","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"s3SrXWci2C"}],"identifier":"instructions","label":"Instructions","html_id":"instructions","implicit":true,"key":"MgGf5SZWF3"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Read carefully all the text and follow the instructions.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"PbjeI8kwWy"}],"key":"QqpGbkzZ1d"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"IiEixgH6nX"}],"key":"BCJzXGAF6L"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Once each section is read, run the jupyter code cell underneath (marked as ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"FmNxBD2s3o"},{"type":"inlineCode","value":"[]","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ooeYUEb9kH"},{"type":"text","value":") by clicking the icon ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"UosSFoMsgw"},{"type":"inlineCode","value":"Run","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"u6eL8rgCy2"},{"type":"text","value":", or pressing the keys SHIFT+ENTER of your keyboard.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"cgvTdvLBmA"}],"key":"vzekDdScDX"}],"key":"aVozhB41ht"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"To start, please run the following cell to import all the packages required for this notebook. Once you run the cell below, an acknowledgement message, stating all libraries were correctly imported, should be printed on screen.","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"eryrYlMydY"}],"key":"R898CNHxCJ"}],"key":"kHKalMpz5N"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import Libraries","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k6897vncjD"}],"identifier":"import-libraries","label":"Import Libraries","html_id":"import-libraries","implicit":true,"key":"ojHhF5pPsR"}],"key":"drR6Wlk9bH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib widget\nimport os \nimport openeo\nimport numpy as np\nimport xarray as xr\nimport rasterio\nfrom osgeo import gdal\nfrom pathlib import Path\nimport multiprocess as mp\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pypro4sail import machine_learning_regression as inv\nfrom functions.biophysical import get_diffuse_radiation_6S, build_soil_database, SRF_LIBRARY, S2_BANDS\nfrom functions import gdal_utils as gu\nfrom functions.eomaji.utils import date_selector\nfrom sklearn.ensemble import RandomForestRegressor as rf_sklearn\nimport datetime as dt\nfrom model_evaluation import double_collocation as dc\nfrom dateutil.relativedelta import relativedelta\nimport datetime\nimport logging\nlogging.getLogger(\"sklearnex\").setLevel(logging.ERROR)\n\nprint('libraries imported correctly!')","key":"XgXRjYkT61"},{"type":"output","id":"p_x4e_MIeu40E0k8C0mc2","data":[],"key":"UGTmsHEY01"}],"key":"OlpvcQsAvh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"General workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TpV6Q9xji1"}],"identifier":"general-workflow","label":"General workflow","html_id":"general-workflow","implicit":true,"key":"jzKe7VkEtB"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This biophysical retrieval method essentially inverts a radiative transfer model (RTM) using a hybrid method where a machine learning (ML) algorithm between top-of-canopy reflectances and biophysical traits is trained using a physically-based RTM (i.e. PRO4SAIL) and is then applied to the Sentinel-2 bands to retrieve the different biophysical variables. This is the method used in the official Sentinel-2 biophysical processor (documentation found ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"c7Vd1aOHu3"},{"type":"link","url":"https://step.esa.int/docs/extra/ATBD_S2ToolBox_V2.1.pdf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gHwICExBab"}],"key":"ZtVyBQ9Fys"}],"urlSource":"https://step.esa.int/docs/extra/ATBD_S2ToolBox_V2.1.pdf","key":"yfNNET0dcu"},{"type":"text","value":") where the workflow is shown in the figure below:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yPsrgdwIfC"}],"key":"SNWL33K7Hi"},{"type":"container","kind":"figure","children":[{"type":"image","url":"/Biophysical_processo-e7ec76079b182e0d4ca76da9922cb913.png","alt":"S2-BIOPAR","key":"EwE2ZR9L9t","urlSource":"./input/figures/Biophysical_processor_figure.png","urlOptimized":"/Biophysical_processo-e7ec76079b182e0d4ca76da9922cb913.webp"},{"type":"caption","children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"captionNumber","kind":"figure","label":"S2-BIOPAR","identifier":"s2-biopar","html_id":"s2-biopar","enumerator":"3","children":[{"type":"text","value":"Figure ","key":"Fla45NukUs"},{"type":"text","value":"3","key":"D6KXPEYdVR"},{"type":"text","value":":","key":"Zw9rjr91IR"}],"template":"Figure %s:","key":"yVkaBuvvDe"},{"type":"text","value":"Flow chart showing how the BIOPAR products are generated operationally (figure taken from ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"H6QRppsFYa"},{"type":"link","url":"https://step.esa.int/docs/extra/ATBD_S2ToolBox_V2.1.pdf","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"S2 Toolbox ATDB","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"NWm35lWaZP"}],"urlSource":"https://step.esa.int/docs/extra/ATBD_S2ToolBox_V2.1.pdf","key":"oRtxhvQK6i"},{"type":"text","value":")","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RyXNdQs3gB"}],"key":"QAh1QOhYLc"}],"key":"uOQyDSWu2o"}],"label":"S2-BIOPAR","identifier":"s2-biopar","enumerator":"1","html_id":"s2-biopar","key":"UoT1DxU7vk"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"In this notebook, we will use a very similar methodology using the pyhton implementation of ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"BVY8E1uqGI"},{"type":"link","url":"https://github.com/hectornieto/pypro4sail","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"pypro4sail","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"kW0uF50cJs"}],"key":"jFFmB6PoPs"}],"urlSource":"https://github.com/hectornieto/pypro4sail","error":true,"key":"LOsA8qKY6u"},{"type":"text","value":". It is essentially the same method described in the above figure, but using Random Forest regressor instead of an Artificial Neural Network (ANNs) algorithm and using a more computationally efficienty Pro4SAIL model (using jacobians).","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"vMgIpGICFy"}],"key":"xRHS7cKeiL"}],"key":"H3osYbQxJY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Building synthetic dataset","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SkjSLMbmEI"}],"identifier":"building-synthetic-dataset","label":"Building synthetic dataset","html_id":"building-synthetic-dataset","implicit":true,"key":"Ql7EZMXsgO"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First, we will build a synthetic dataset where a look-up-table (LUT) will be created using PRO4SAIL that relates top-of-canopy spectra and biophysical variables.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pLjn6GAtsd"}],"key":"CED13CsewI"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The target biophysical variables are: [“Cab”, “Car”, “Cm”, “Cw”, “Ant”, “Cbrown”,“LAI”, “leaf_angle”].","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YfXJvfX1D8"}],"key":"m1y8ScbQXi"},{"type":"heading","depth":4,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Leaf biochemical traits (from PROSPECT):","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Fp8XTQ3tRo"}],"identifier":"leaf-biochemical-traits-from-prospect","label":"Leaf biochemical traits (from PROSPECT):","html_id":"leaf-biochemical-traits-from-prospect","implicit":true,"key":"pCQDtp72kl"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Cab (Chlorophyll a + b content)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"jJAcLXtElS"}],"key":"mDK766Damm"},{"type":"text","value":"\nThe amount of chlorophyll pigments per unit leaf area, usually expressed in µg/cm².","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"zwT2ANy2rJ"}],"key":"tZGqjuxDcJ"}],"key":"o7rWuupsZF"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Car (Carotenoid content)","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"b0rzsQ8ULj"}],"key":"NsNQye7ixx"},{"type":"text","value":"\nConcentration of carotenoids (xanthophylls + carotenes) per unit leaf area, expressed in µg/cm².","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"CNduyCEYvl"}],"key":"s4o0Zzr4Va"}],"key":"diKDD1rn7c"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Cm (Leaf dry matter content)","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"BCIXKCArR8"}],"key":"NctfSzkxgO"},{"type":"text","value":"\nThe mass of dry matter (structural compounds like cellulose, lignin, proteins, etc.) per unit leaf area, usually in g/cm².","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"cd86H66UFk"}],"key":"C4lCqOamOB"}],"key":"MLR9cUolb8"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"strong","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Cw (Equivalent leaf water thickness)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"eiNeVtbd9W"}],"key":"EOW8Esa1dc"},{"type":"text","value":"\nThe water content of the leaf per unit area, in cm (equivalent water thickness).","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"hPbaYlAc1S"}],"key":"rHg3OM3QDF"}],"key":"UqZATa4W4v"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"strong","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Ant (Anthocyanin content)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"JfCs5xgKXH"}],"key":"CkYB3kdLCc"},{"type":"text","value":"\nConcentration of anthocyanins per unit leaf area (µg/cm²).","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"tFpItyWUkh"}],"key":"blLbLb5WoO"}],"key":"HavUdL0UFO"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"strong","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Cbrown (Brown pigment content)","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"IQc009UwjV"}],"key":"lO95Yapdl9"},{"type":"text","value":"\nA semi-empirical parameter representing the amount of “brown pigments” (products of leaf senescence, degradation of chlorophyll, accumulation of tannins, etc.).","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"K9QzSOSz7u"}],"key":"VUrg8tvihu"}],"key":"JDN3KUhAfg"}],"key":"Fn3AOzNXDZ"},{"type":"heading","depth":4,"position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Canopy structural traits (from SAIL):","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"AQDhHG3tuL"}],"identifier":"canopy-structural-traits-from-sail","label":"Canopy structural traits (from SAIL):","html_id":"canopy-structural-traits-from-sail","implicit":true,"key":"aWHpihptt9"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":29,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":29,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"strong","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"LAI (Leaf Area Index)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"PtRrKA441Z"}],"key":"rczIbEWqdF"},{"type":"text","value":"\nTotal one-sided leaf area per unit ground area (m²/m²).","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"zCgrQ6IcOh"}],"key":"tyVGW5Xa7R"}],"key":"rM42Fd4Kpu"},{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":32,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"strong","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"leaf_angle (Leaf angle distribution parameter)","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"dgqlCtKhQb"}],"key":"g1T5NTDuub"},{"type":"text","value":"\nA parameter describing the average orientation of leaves in the canopy, often represented by an ellipsoidal distribution.\nLow values → leaves more horizontally oriented (planophile).\nHigh values → leaves more vertically oriented (erectophile).","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"fHy7GT4fKa"}],"key":"LIkIviC520"}],"key":"cF0SKPjqI8"}],"key":"ogy6xXbwTx"}],"key":"q8tUhxHcqf"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Forward RTM simulations to build LUT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lvKQplMmVJ"}],"identifier":"forward-rtm-simulations-to-build-lut","label":"Forward RTM simulations to build LUT","html_id":"forward-rtm-simulations-to-build-lut","implicit":true,"key":"tHo3wiwVbV"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will perform 40000 PRO4SAIL simulations in Forward mode (i.e. using vegetation paramters to simulate surface reflectance based on the RTM’s description of light-canopy intereactions) using global vegetation parameters bounds as specified below, which are taken from global datasets (e.g. ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pMjmcJKuOU"},{"type":"link","url":"https://ecosis.org/package/leaf-optical-properties-experiment-database--lopex93-","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"LOPEX","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gd5nAZSX3m"}],"key":"t82XB2iJey"}],"urlSource":"https://ecosis.org/package/leaf-optical-properties-experiment-database--lopex93-","key":"kJlmw8uJBy"},{"type":"text","value":"). This is done to be able to train the model over a wide range of condtions and be globally applicable.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pkv8qE8quj"}],"key":"KNFEFpqqgL"}],"key":"I4FpJ3FYnC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"n_simulations = 40000\n\n# parameter names\nOBJ_PARAM_NAMES = [\"Cab\", \"Car\", \"Cm\", \"Cw\", \"Ant\", \"Cbrown\",\n                   \"LAI\", \"leaf_angle\"]\n# parameter info\nPARAM_PROPS = {\"Cab\": [\"Chlorophyll a+b\", r\"$\\mu g\\,cm^{-2}$\", 1],\n               \"Car\": [\"Carotenoids\", r\"$\\mu g\\,cm^{-2}$\", 1],\n               \"Cm\": [\"Dry matter\", r\"$g\\,cm^{-2}$\", 3],\n               \"Cw\": [\"Water content\", r\"$g\\,cm^{-2}$\", 3],\n               \"Ant\": [\"Antocyanins\", r\"$\\mu g\\,cm^{-2}$\", 1],\n               \"Cbrown\": [\"Brown pigments\", r\"$-$\", 1],\n               \"LAI\": [\"Leaf Area Index\", r\"$m^{2}\\,m^{-2}$\", 2],\n               \"leaf_angle\": [\"Mean leaf inclination angle\", r\"º\", 1]}\n\n# specify range of variable values\n## minimum\nMIN_N_LEAF = 1.0  # From LOPEX + ANGERS average\nMIN_CAB = 0.0  # From LOPEX + ANGERS average\nMIN_CAR = 0.0  # From LOPEX + ANGERS average\nMIN_CBROWN = 0.0  # from S2 L2B ATBD\nMIN_CM = 0.0017  # From LOPEX + ANGERS average\nMIN_CW = 0.000  # From LOPEX + ANGERS average\nMIN_ANT = 0.0\nMIN_LAI = 0.0\nMIN_LEAF_ANGLE = 30.0  # from S2 L2B ATBD\nMIN_HOTSPOT = 0.1  # from S2 L2B ATBD\nMIN_BS = 0.50  # from S2 L2B ATBD\n\n## maximum\nMAX_N_LEAF = 3.0  # From LOPEX + ANGERS average\nMAX_CAB = 110.0  # From LOPEX + ANGERS average\nMAX_CAR = 30.0  # From LOPEX + ANGERS average\nMAX_CBROWN = 2.00  # from S2 L2B ATBD\nMAX_CM = 0.0331  # From LOPEX + ANGERS average\nMAX_CW = 0.0525  # From LOPEX + ANGERS average\nMAX_ANT = 40.0\nMAX_LAI = 5  # from S2 L2B ATBD\nMAX_LEAF_ANGLE = 80.0  # from S2 L2B ATBD\nMAX_HOTSPOT = 0.5  # from S2 L2B ATBD\nMAX_BS = 3.5  # from S2 L2B ATBD\n\nprosail_bounds = {'N_leaf': (MIN_N_LEAF, MAX_N_LEAF),\n                  'Cab': (MIN_CAB, MAX_CAB),\n                  'Car': (MIN_CAR, MAX_CAR),\n                  'Cbrown': (MIN_CBROWN, MAX_CBROWN),\n                  'Cw': (MIN_CW, MAX_CW),\n                  'Cm': (MIN_CM, MAX_CM),\n                  'Ant': (MIN_ANT, MAX_ANT),\n                  'LAI': (MIN_LAI, MAX_LAI),\n                  'leaf_angle': (MIN_LEAF_ANGLE, MAX_LEAF_ANGLE),\n                  'hotspot': (MIN_HOTSPOT, MAX_HOTSPOT),\n                  'bs': (MIN_BS, MAX_BS)}\ndf_bounds = pd.DataFrame(prosail_bounds, index=['min', 'max'])\nn_simulations = 40000\nprint(f'Setting up {n_simulations} simulations with inputs bounds:\\n\\n {df_bounds[OBJ_PARAM_NAMES]}')\nparams_orig = inv.build_prosail_database(n_simulations,\n                                         param_bounds=prosail_bounds,\n                                         distribution=inv.SALTELLI_DIST)\nprint('\\nDone!')\nprint('Table with simulation inputs:')\npd.DataFrame(params_orig)","key":"kxc4Sm8EG1"},{"type":"output","id":"minLXopRIXxtg_QB-OclP","data":[],"key":"wCoANff0bH"}],"key":"kO5plI23VN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Estimate diffuse irradiance","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UWTOqtUCY2"}],"identifier":"estimate-diffuse-irradiance","label":"Estimate diffuse irradiance","html_id":"estimate-diffuse-irradiance","implicit":true,"key":"hRfH1cGkKn"}],"key":"u3GkfhEWLv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"Running 6S for estimation of diffuse/direct irradiance\")\n# specify geometric variables (this normally can be acquired from Sentinel-2 metadata)\n# As an example, we specify default values\naot = 1. # Aerosol optical thicness\nwvp = 25. # water vapour\nsza = 37.5 # sun zenith angle\nsaa = 180 # sun azimuth angle\nvza = 25 # sensor viewing angle\n\n# specify date\ndate_obj = dt.datetime(2023, 8, 5, 10, 30)\n\nskyl = get_diffuse_radiation_6S(aot, wvp, sza, saa, date_obj,\n                                                   altitude=0.1)\nprint('Done!')","key":"fHqKC4nyKL"},{"type":"output","id":"kfK9XtvV-hW1RceCmD8ty","data":[],"key":"nujp09opKn"}],"key":"QT64MOcUh7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build soil spectral database","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vtT16H1pmN"}],"identifier":"build-soil-spectral-database","label":"Build soil spectral database","html_id":"build-soil-spectral-database","implicit":true,"key":"roElomCcjg"}],"key":"mFnGxsywGr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"Building {np.size(params_orig['bs'])} PROSPECTD+4SAIL simulations\")\nsoil_spectrum = build_soil_database(params_orig[\"bs\"])\nprint('Done!')","key":"O5NAwGuJJj"},{"type":"output","id":"5dL_Xl8XKeDKm237dqH4i","data":[],"key":"voO5wNKK2U"}],"key":"hCsNhEnQKj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Simulate Sentinel-2 spectra","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uM6NqTvtYK"}],"identifier":"simulate-sentinel-2-spectra","label":"Simulate Sentinel-2 spectra","html_id":"simulate-sentinel-2-spectra","implicit":true,"key":"mqMFUcldA0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We are interested in inverting Sentinel-2 top-of-canopy reflectance to retrieve the biophysical variables. As such, we will need to take into account the chracteristics of the Sentinel-2 sensor.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cuLw3OfAOJ"}],"key":"fJjdbXYdOX"},{"type":"container","kind":"figure","children":[{"type":"image","url":"/S2_bands_info-2fc19ba212c4a6edc8c4c6eea4c7ceb6.jpg","alt":"S2","key":"LAzNhqX7tu","urlSource":"./input/figures/S2_bands_info.jpg","urlOptimized":"/S2_bands_info-2fc19ba212c4a6edc8c4c6eea4c7ceb6.webp"},{"type":"caption","children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"captionNumber","kind":"figure","label":"S2-bands","identifier":"s2-bands","html_id":"s2-bands","enumerator":"2","children":[{"type":"text","value":"Figure ","key":"LD2GbCaZoD"},{"type":"text","value":"2","key":"eOeaYgyr4F"},{"type":"text","value":":","key":"mffP0bo8GM"}],"template":"Figure %s:","key":"n3s1m5wxr8"},{"type":"text","value":"Sentinel-2 MSI bands information (figure taken from ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"S9WZeqY72Y"},{"type":"link","url":"https://ieeexplore.ieee.org/document/8909218","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Pasqualotto et al. 2019","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"LLhDuUzKYB"}],"urlSource":"https://ieeexplore.ieee.org/document/8909218","key":"dDQ1q9Rc3m"},{"type":"text","value":")","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"YI0pMZvleg"}],"key":"tdvsvXJKls"}],"key":"ecA7eUkWKh"}],"label":"S2-bands","identifier":"s2-bands","enumerator":"2","html_id":"s2-bands","key":"uoO6MN2JMs"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"In this case, we will use bands [‘B02’, ‘B03’, ‘B04’, ‘B05’, ‘B06’, ‘B07’, ‘B08’, ‘B8A’, ‘B11’, ‘B12’] as our ‘features’ to invert the RTM.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"vYLIsZKbzG"}],"key":"wz4WPXVxBx"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"First, will need to convolve the surface reflectance to the spectral response function (SRF) of the Sentinel-2 sensor to best simulate this sensor.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"aQXj1tfABr"}],"key":"TfFSNjEyOu"},{"type":"heading","depth":4,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Visualize Sentinel-2 Spectral Response Function (SRF)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Liq1l6dohG"}],"identifier":"visualize-sentinel-2-spectral-response-function-srf","label":"Visualize Sentinel-2 Spectral Response Function (SRF)","html_id":"visualize-sentinel-2-spectral-response-function-srf","implicit":true,"key":"GzA9uyg0Z4"}],"key":"mo0fZKnipL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# bands to use in generating LUT and inversion\nS2_BANDS = ['B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B8A', 'B11', 'B12']\n# Stack spectral bands\nsrf = []\nsrf_file = SRF_LIBRARY / f'Sentinel2A.txt'\nsrfs = np.genfromtxt(srf_file, dtype=None, names=True)\nfor band in S2_BANDS:\n    srf.append(srfs[band])\n\n\n# open as pandas dataframe\nsrf_df = pd.read_csv(srf_file, sep = '\\t')\n\nband_names = srf_df[S2_BANDS].columns\n\n# plot spectral response function\ncolormap = plt.cm.rainbow # Choose a colormap\n# get color within colormap range for each band (depends on number of bands)\ncolors = [colormap(x / (len(band_names) - 1)) for x in range(len(band_names))]\n\n# Show spectral response function (SRF) curves\nplt.figure(figsize=(9, 5))\nplt.title(f'Spectral Response Function (SRF) - Sentinel-2', fontsize=14)\nplt.xlabel('Wavelength (nm)', fontsize=12)\nplt.xlim(400, 2500)\nplt.ylabel('Relative Response (-)', fontsize=12)\nplt.ylim(0, 1)\nplt.grid(True)\ni = 0\nfor band in band_names:\n    plt.plot(srf_df['SR_WL'], srf_df[band], color=colors[i], label = f'{str(band)}')\n    i += 1\n\nplt.legend(loc='lower right', ncol=5)\nplt.show()\n\n","key":"wNd9dUfD4Q"},{"type":"output","id":"UkkWfGyC80FMj2TEnW1xC","data":[],"key":"JLcZBwsXV2"}],"key":"GvfjbOepsS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build simulated Sentinel-2-like Look-Up-Table (LUT)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BWyKf6aKDR"}],"identifier":"build-simulated-sentinel-2-like-look-up-table-lut","label":"Build simulated Sentinel-2-like Look-Up-Table (LUT)","html_id":"build-simulated-sentinel-2-like-look-up-table-lut","implicit":true,"key":"w3utuosrWD"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we will mimic sentinel-2 surface reflectance using the PRO4SAIL RTM. For this testing, we will assume certain geometric and atmospheric conditions with specific values for sun zenith angle (sza), sun azimuth angle (saa), sensor viewing zenith angle (vza), water vapour (wvp).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tTTvu214jy"}],"key":"EI7Otjvt4v"}],"key":"kSt0WIsN1G"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# if you want to save the LUT generating you can can specify a directory for lut_outfile\nlut_outfile = None\n\n# spectral range\nwls_sim = np.arange(400, 2501)\n\n# number of CPUs to use to perform simulations \n# (can change depending on number of CPUs in your computer)\nnjobs = 4\n\n# generate LUT\nrho_canopy_vec, params = inv.simulate_prosail_lut_parallel(\n        njobs,\n        params_orig,\n        wls_sim,\n        soil_spectrum,\n        skyl=skyl,\n        sza=sza,\n        vza=vza,\n        psi=0,\n        srf=srf,\n        outfile=lut_outfile,\n        calc_FAPAR=False,\n        reduce_4sail=True)\n\nprint('Done!')\n","key":"SdII4eZuU4"},{"type":"output","id":"0GHMKBu6cRtxi2H6IH1KR","data":[],"key":"KxSA4bYjnE"}],"key":"R190sHTezn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Training model using synthetic LUT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bkowL6tj8v"}],"identifier":"training-model-using-synthetic-lut","label":"Training model using synthetic LUT","html_id":"training-model-using-synthetic-lut","implicit":true,"key":"Lnki5Zw3H8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we will train a Random Forest (RF) regressor with ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vSC97OpzfI"},{"type":"link","url":"https://scikit-learn.org/stable/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Scikit-learn","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BSwEHR7zsI"}],"key":"gP1ddGPnea"}],"urlSource":"https://scikit-learn.org/stable/","key":"xQm77wLMGG"},{"type":"text","value":" from the synthetic LUT generated with the PROSAIL simulations, which relate Sentinel-2 bands with biophysical variables.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kx8pUeBXN4"}],"key":"OXcoZ7v1Kc"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We train individual RF models for each target variables (i.e. LAI, Cab, Car, Cm, Cw, Ant, Cbrown, leaf_angle)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CqWpBZgNKV"}],"key":"yaFDmMiSN6"}],"key":"QfLIwks3Cq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Approach 1: Train individual random forest model for each variable\nprint(f\"Training {len(OBJ_PARAM_NAMES)} Random forests for \"\n      f\"{','.join(OBJ_PARAM_NAMES)}\")\n\n# RF paramters\nscikit_regressor_opts = {\"n_estimators\": 100,\n                         \"min_samples_leaf\": 1,\n                         \"n_jobs\": -1}\n\nstart_time = dt.datetime.today()\ninput_scalers = {}\noutput_scalers = {}\nregs = {}\nfor i, param in enumerate(OBJ_PARAM_NAMES):\n    reg, input_gauss_scaler, output_gauss_scaler, _ = \\\n        inv.train_reg(rho_canopy_vec,\n                      params[param].reshape(-1, 1),\n                      scaling_input='normalize',\n                      scaling_output='normalize',\n                      regressor_opts=scikit_regressor_opts,\n                      reg_method=\"random_forest\")\n\n    input_scalers[param] = input_gauss_scaler\n    output_scalers[param] = output_gauss_scaler\n    regs[param] = reg\n    \nend_time_standard = dt.datetime.today() - start_time\n\nprint(\"\\nProcessing time (Training):\")\nprint(f\"\\t{len(OBJ_PARAM_NAMES)} Random forests: {end_time_standard}\")\n    \nprint('Done!')","key":"xtcSF4YTCa"},{"type":"output","id":"YPgvvNw_IGpLHp29RWSiR","data":[],"key":"o9wfsd9BvP"}],"key":"PrtauueODc"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Testing model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f5vY6SXbWd"}],"identifier":"testing-model","label":"Testing model","html_id":"testing-model","implicit":true,"key":"W6CeoJQ6Ll"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will now test the RF regression model using synthetic sentinel-2-like reflectance to see how well the trained RF model can simulate the RTM. In this case, we will add some random noise to the testing surface reflectance to better mimic real conditions that occur with optical sensors.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iQIiXLsGtt"}],"key":"rUE3xyC3nT"}],"key":"b7QItNCpV4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# create synthetic Sentine-2-like spectra\nrho_canopy_test, params_test = inv.simulate_prosail_lut_parallel(\n        njobs,\n        params_orig,\n        wls_sim,\n        soil_spectrum,\n        skyl=skyl,\n        sza=sza,\n        vza=vza,\n        psi=0,\n        srf=srf,\n        outfile=None,\n        calc_FAPAR=False,\n        reduce_4sail=True)\n\n# set how much noise to add (either relative or absolute)\nrel_unc = 0.1\nabs_unc = 0.015\nRELATIVE_UNC = 1\nABSOLUTE_UNC = 0\nnoise_method = RELATIVE_UNC\n# add noise to mimic real conditions\nif noise_method == RELATIVE_UNC:\n    stdev = rho_canopy_test * rel_unc\n    white_noise = np.random.normal(scale=stdev, size=rho_canopy_test.shape)\n    rho_canopy_test = rho_canopy_test * (1 + white_noise)\nelse:\n    white_noise = np.random.normal(scale=abs_unc, size=rho_canopy_test.shape)\n    rho_canopy_test = rho_canopy_test + white_noise\n    \nprint('Done!')","key":"ISCbQUQ18j"},{"type":"output","id":"NAPLXvfhomjh5ZrK-aFpp","data":[],"key":"Ddm9fNZRUX"}],"key":"jXlyhCyxjm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Evaluation of the retrievals of biophysical variables","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CAEvF8hMhy"}],"identifier":"evaluation-of-the-retrievals-of-biophysical-variables","label":"Evaluation of the retrievals of biophysical variables","html_id":"evaluation-of-the-retrievals-of-biophysical-variables","implicit":true,"key":"IyKgL7aEiT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we will apply the trained model on the testing dataset to see how well we can estimate the biophysical traits using this hybrid approach.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rMHoBr1MyQ"}],"key":"QMb8xoXulG"}],"key":"OyCqd4BiKB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"figsize = 16 / 2.45, 22 / 2.45\n\nstart_time = dt.datetime.today()\n# Apply individual RF model to test data\nprint(f\"Applying individual RF regression model to Sentinel-like spectra\")\noutput_regs = {}\nfor i, param in enumerate(OBJ_PARAM_NAMES):\n    output = output_scalers[param].inverse_transform(\n        regs[param].predict(\n            input_scalers[param].transform(\n                rho_canopy_test)).reshape(-1, 1)).reshape(-1)\n    output_regs[param] = output\n\nend_time_standard = dt.datetime.today() - start_time\n\nprint(\"\\nProcessing time (Testing):\")\nprint(f\"\\t{len(OBJ_PARAM_NAMES)} Random forests: {end_time_standard}\")\nprint('\\nPloting scatter plots...')\n#outfile = out_dir / f\"evaluation_singleRF.eps\"\nfig, axs = plt.subplots(ncols=2, nrows=4,\n                        figsize=figsize)\n\nfig.supxlabel(\"Estimated\")\nfig.supylabel(\"Observed\")\n\naxs = axs.reshape(-1)\nerror_table = pd.DataFrame({\"Trait\" : [], \"N\": [], \"bias\": [],\n                            \"RMSE\": [], \"r\": []})\nfor i, param in enumerate(OBJ_PARAM_NAMES):\n    name, unit, decs = PARAM_PROPS[param]\n    txt_template =  (\"   N: {:>6d}\\n\"\n                     \"bias: {:>6.%sf}\\n\"\n                     \"RMSE: {:>6.%sf}\\n\"\n                     \"   r: {:>6.2f}\")%(decs, decs)\n    \n    test = output_regs[param]\n    cor, *_ = dc.agreement_metrics(params_test[param] ,test)\n    bias, mae, rmse = dc.error_metrics(params_test[param], test)\n    dc.density_plot(test, params_test[param], axs[i], s=1, rasterized=True)\n\n    absline = np.asarray([[np.amin(params_test[param]), np.amax(params_test[param])],\n                          [np.amin(params_test[param]), np.amax(params_test[param])]])\n\n    axs[i].plot(absline[0], absline[1], \"k:\")\n    axs[i].set_title(f\"{name} ({unit})\")\n    axs[i].text(0.05,\n                0.95,\n                txt_template.format(len(test), bias, rmse, cor),\n                va=\"top\",\n                fontfamily=\"monospace\",\n                transform=axs[i].transAxes)\n\n    error_dict = {\"Trait\" : [param], \"N\": [len(test)], \"bias\": [bias],\n                  \"RMSE\": [rmse], \"r\": [cor]}\n    error_table = pd.concat([error_table, pd.DataFrame(error_dict)],\n                            ignore_index=True)\n\nplt.tight_layout()\nplt.show()\nprint('Error metrics table:')\nerror_table","key":"QDzxXXCiaw"},{"type":"output","id":"okUXHZnZZEYF61rF8cPKl","data":[],"key":"JJfiu6ohFe"}],"key":"YHJCr7n4aJ"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"gmyHbH7Non"}],"key":"veinPVA0I1"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"As shown, this hybrid approach allows to train an empirical RF regressor based on the simulations of synthetic datasets of surface reflectance and biophysical variables from a physically-based RTM. This trained model can then be easily applied to Sentinel-2 imagery and is much more computationally efficient than inverting an RTM using traditional approaches.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YfHFSKQIV7"}],"key":"JerqwxqvsV"}],"key":"p4NBeu5q83"}],"key":"rPZ2z3XsJ6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Apply RF model to real Sentinel-2 image","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rFljWPvGZB"}],"identifier":"apply-rf-model-to-real-sentinel-2-image","label":"Apply RF model to real Sentinel-2 image","html_id":"apply-rf-model-to-real-sentinel-2-image","implicit":true,"key":"BnCitpFT8x"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let us now apply this trained model on sentinel-2 image to retrieve the different biophysical traits.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uv3q6GSRDp"}],"key":"OI7WygyHIj"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We wil again acquire the data from the Copernicus Data Space Ecosystem (CDSE).","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mR6IergsnC"}],"key":"sOk0t3okIW"},{"type":"admonition","kind":"important","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","key":"cwRxSfWWYr"}],"key":"ecOz25pwbB"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"In order to execute this notebook, you will need to register in the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"JAcDZuZc2v"},{"type":"link","url":"https://dataspace.copernicus.eu/","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Copernicus Data Space Ecosystem (CSDE)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"nq3boLjdJg"}],"key":"zaeEXdopGt"}],"urlSource":"https://dataspace.copernicus.eu/","key":"teoygrXEd4"},{"type":"text","value":" to acquire and process Sentinel-2 imagery.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ljTwAfyMag"}],"key":"Q8karzpVsE"}],"key":"Img3lwcO1X"}],"key":"hg7eHrJWDY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Connect to OpenEO Backend","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cuOwNCxIXE"}],"identifier":"connect-to-openeo-backend","label":"Connect to OpenEO Backend","html_id":"connect-to-openeo-backend","implicit":true,"key":"mTnz1oJS79"}],"key":"q7nWVwDulu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"connection = openeo.connect(\"https://openeo.dataspace.copernicus.eu\")\nconnection.authenticate_oidc()","key":"F78mE0etyY"},{"type":"output","id":"b0Ix3CITetm9atTuAI1pv","data":[],"key":"OKKx3dKoGD"}],"key":"jXoQ8PqZLK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize information of Sentinel-2 collection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"onVQOWib6t"}],"identifier":"visualize-information-of-sentinel-2-collection","label":"Visualize information of Sentinel-2 collection","html_id":"visualize-information-of-sentinel-2-collection","implicit":true,"key":"yWt7ehJeEj"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can get all the band and metadta information related to the Sentinel-2 L2A product with the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"a9vziyXv0d"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"connection.describe_collection(“SENTINEL2_L2A”)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tuKsNxYcUS"}],"key":"csGpPRokdT"},{"type":"text","value":" function","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WkKVJq3Sgt"}],"key":"Mg6YcdmsLJ"}],"key":"sbioAVxlXZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"connection.describe_collection(\"SENTINEL2_L2A\")","key":"cFZu3KhFmC"},{"type":"output","id":"jg4YJ1_kGgtmYGTMlMESp","data":[],"key":"qKdps2ceaG"}],"key":"qmSJcsLZLB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load Sentinel-2 image using OpenEO","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z6mnkjfIur"}],"identifier":"load-sentinel-2-image-using-openeo","label":"Load Sentinel-2 image using OpenEO","html_id":"load-sentinel-2-image-using-openeo","implicit":true,"key":"zAvWET6219"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Choose date and area of interest of sentinel-2 imager","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"spe7U7374P"}],"key":"NlJRi899IO"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"eVVLpQDnXa"}],"key":"u7ws2txlFI"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"By default, we will use the image acquired over the WES Almond orchard near the UAV overpass (April 16th 2024)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lfFsRGY4BB"}],"key":"L4PZqIWwOy"}],"key":"utdlChafDU"}],"key":"FHw5zSbjvD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\n# Define search parameters\ndate = datetime.date(2024, 4, 16)\nbbox = [-121.35,37.45, -121.10, 37.65] # please insert a bbox here in the form of [minx, miny, maxx, maxy\ntime_window = [\n        str(date + relativedelta(days=-3)),\n        str(date + relativedelta(days=+3)),\n    ]\naoi = dict(zip([\"west\", \"south\", \"east\", \"north\"], bbox))\n\ns2_ref_bands = [\n        \"B02\",\n        \"B03\",\n        \"B04\",\n        \"B05\",\n        \"B06\",\n        \"B07\",\n        \"B08\",\n        \"B8A\",\n        \"B11\",\n        \"B12\"\n    ]\n\ns2_meta_bands = [\"SCL\",\n                 'WVP',\n                 'AOT',\n                 'sunAzimuthAngles',\n                 'sunZenithAngles',\n                 'viewZenithMean'\n                ]\n","key":"wJSji1oDtY"},{"type":"output","id":"_WrArOGsCnVDK5JtXzm8Z","data":[],"key":"e3rXaFrSXs"}],"key":"tjtagsJYC9"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pre-process Sentinel-2 image","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zo5stOzUkZ"}],"identifier":"pre-process-sentinel-2-image","label":"Pre-process Sentinel-2 image","html_id":"pre-process-sentinel-2-image","implicit":true,"key":"xMsgWB7Qav"}],"key":"JlNFge6ixL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# set up outfile\ns2_dir =  Path(\"./dataset/sentinel_imagery\")\ns2_outfile = s2_dir / \"s2_cube_bio.nc\"\n\noverwrite = False\n\nif s2_outfile.exists() and overwrite == False:\n    print(f'{s2_outfile} already exists..')\nelse:\n    print('Loading S2 data cube from Copernicus Data Space Ecosystem..')\n    # Load Sentinel-2 cube and merge with Biopar\n    s2_cube = connection.load_collection(\n        \"SENTINEL2_L2A\", spatial_extent=aoi, temporal_extent=time_window, bands=s2_ref_bands+s2_meta_bands)\n    \n    print('Mask out non-vegetated pixels...')\n    # Apply cloud and shadow mask using SCL (keep only class 4 and 5 = vegetation/bare)\n    mask = ~((s2_cube.band(\"SCL\") == 4) | (s2_cube.band(\"SCL\") == 5))\n    s2_masked = s2_cube.mask(mask)\n    \n    print('Select best available pixel from time window')\n    # Reduce time dimension by selecting the first valid observation\n    s2_best_pixel = s2_masked.reduce_dimension(dimension=\"t\", reducer=\"first\")\n    \n    print(f'Saving s2 cube as {s2_outfile} .. ')\n    s2_best_pixel.download(str(s2_outfile))\n    \n    print(f'Loading {str(s2_outfile)} as xarray object')\n    \ns2_cube =  xr.open_dataset(str(s2_outfile))\n\n# get geographic metadata \nx_utm = s2_cube['B02']['x']\ny_utm = s2_cube['B02']['y']\n# Pixel size\ndx = float((x_utm[1] -x_utm[0]))\ndy = float((y_utm[1] - y_utm[0]))\n\n# Top-left corner \nx_min = float(s2_cube['x'].min())\ny_max = float(s2_cube['y'].max())\n#geotransform\ngt = (x_min, dx, 0.0, y_max, 0.0, dy)\n# projection\nprj =  s2_cube.crs.spatial_ref\n\n\nprint(f'Extracting {S2_BANDS} as 3D array cube')\n# These are the Sentinel 2 bands to use RTM inversion\ns2_xarray = s2_cube[S2_BANDS].to_array(dim=\"band\").rio.write_crs(rasterio.crs.CRS.from_string(prj).to_string())\ns2_ar = s2_xarray.values/10000\n# get metadata and store in dictionary\nmeta_dict = {}\nfor var in s2_meta_bands:\n    print(f'Extracting {var} as array')\n    var_ar = s2_cube[[var]].to_array(dim=\"band\").values[0]\n    meta_dict[var] = var_ar\n    \n\n","key":"xutGpnIzPc"},{"type":"output","id":"eZrEqF33Q4YjI5Cr3bEk-","data":[],"key":"IHqqlt89fy"}],"key":"ggQ5zxakQN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build database based on geometric conditions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DCjGzAIxUJ"}],"identifier":"build-database-based-on-geometric-conditions","label":"Build database based on geometric conditions","html_id":"build-database-based-on-geometric-conditions","implicit":true,"key":"fIcyjmvBd7"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now, we will train the model based the actual geometric and atmospheric conditions during the Sentinel-2 overpass. For this, we will again build the LUT using PROSAIL and the metadata provided in the Sentinel-2 images.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KDRXQDBKdq"}],"key":"U6JLtXejI2"}],"key":"hSqxidTies"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get sun/viewing angles\nsza = np.nanmean(meta_dict['sunZenithAngles'])\nsaa = np.nanmean(meta_dict['sunAzimuthAngles'])\nvza = np.nanmean(meta_dict['viewZenithMean'])\n# get aerosol optical thickness and water vapour\naot = np.nanmean(meta_dict['AOT'])/1000\nwvp = np.nanmean(meta_dict['WVP'])/1000\n\ndate_obj = dt.datetime(2024, 4, 16, 10, 30)\n\nprint(\"Running 6S for estimation of diffuse/direct irradiance\")\nskyl = get_diffuse_radiation_6S(aot, wvp, sza, saa, date_obj,\n                                altitude=0.1)\n\nprint(f\"Building {np.size(params_orig['bs'])} PROSPECTD+4SAIL simulations\")\nsoil_spectrum = build_soil_database(params_orig[\"bs\"])\n\n# spectral range\nwls_sim = np.arange(400, 2501)\n\n# number of CPUs to use to perform simulations\nnjobs = 4\n# generate LUT\nrho_canopy_vec, params = inv.simulate_prosail_lut_parallel(\n        njobs,\n        params_orig,\n        wls_sim,\n        soil_spectrum,\n        skyl=skyl,\n        sza=sza,\n        vza=vza,\n        psi=0,\n        srf=srf,\n        outfile=lut_outfile,\n        calc_FAPAR=False,\n        reduce_4sail=True)\nprint('Done!')","key":"x4UXe2C58X"},{"type":"output","id":"MJ3lKAMUxnMeXM0DrGRs3","data":[],"key":"pANjWK4Zds"}],"key":"rnhO9Egsiy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Train RF model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nevgSWDhGs"}],"identifier":"train-rf-model","label":"Train RF model","html_id":"train-rf-model","implicit":true,"key":"w9cvWTm8bZ"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"As before, we will now train the RF algorithm based on the simulated LUT.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"CWCXV3usv3"}],"key":"fCyQzjkyeT"}],"key":"Gc1azYV6nZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"Training Random forest for {','.join(OBJ_PARAM_NAMES)}\")\ninput_scalers = {}\noutput_scalers = {}\nregs = {}\nfor i, param in enumerate(OBJ_PARAM_NAMES):\n    reg, input_gauss_scaler, output_gauss_scaler, _ = \\\n        inv.train_reg(rho_canopy_vec, params[param].reshape(-1, 1),\n                      scaling_input=\"normalize\", scaling_output=\"normalize\",\n                      regressor_opts=scikit_regressor_opts,\n                      reg_method=\"random_forest\")\n\n    input_scalers[param] = input_gauss_scaler\n    output_scalers[param] = output_gauss_scaler\n    regs[param] = reg\n\nprint('Done!')","key":"uw3na8Whhi"},{"type":"output","id":"ztc5M1ZThaUGn8DIM_gVo","data":[],"key":"Uc5EPTKafb"}],"key":"zrlJopLCk9"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Apply model on S2","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e4xjgMljFG"}],"identifier":"apply-model-on-s2","label":"Apply model on S2","html_id":"apply-model-on-s2","implicit":true,"key":"zax0XI4pDU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now, let us apply the trained RF model on the Sentinel-2 imagery","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GxcFjlJl7B"}],"key":"XN7Qw3qe0D"}],"key":"oMWTHivfrE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get 2D dimensions of array\ndims = s2_ar[0,:,:].shape\n\n# only select vegetation/soil pixels\nvalid = np.logical_or(meta_dict['SCL'] == 4, meta_dict['SCL'] == 5)\nvalid = np.ravel(valid)\nimage_array = s2_ar.reshape((s2_ar.shape[0], -1)).T\nimage_array = image_array[valid]\nbio_dict = {}\nfor i, param in enumerate(OBJ_PARAM_NAMES):\n    output = np.full(valid.size, np.nan)\n    print(f\"Appliying {param} model to S2 image reflectance array\")\n    if np.any(valid):\n        output[valid] = output_scalers[param].inverse_transform(\n            regs[param].predict(input_scalers[param].transform(\n                image_array)).reshape(-1, 1)).reshape(-1)\n    \n    output = output.reshape(dims)\n    \n    if param == 'fAPAR' or param == 'fIPAR':\n        min_value = 0\n        max_value = 1\n    else:\n        min_value = inv.prosail_bounds[param][0]\n        max_value = inv.prosail_bounds[param][1]\n    \n    output = np.clip(output, min_value, max_value)\n    # save to dictionary\n    bio_dict[param] = output\n    output_name = f\"S2_{param}_{date.strftime('%Y%m%d')}.tif\"\n    output_file = s2_dir / output_name\n    print(f\"Saving {param} in {output_file}\\n\")\n    gu.save_image(output, gt, prj, output_file)\n    \n    del output\n\nprint('Done!')","key":"v0AfQspl3K"},{"type":"output","id":"9G8O7SLD9PlJaLVVM45uv","data":[],"key":"abfcMnyzD1"}],"key":"l6L5sMxvZM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize retrieved biophysical outputs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xDCVk9VwTT"}],"identifier":"visualize-retrieved-biophysical-outputs","label":"Visualize retrieved biophysical outputs","html_id":"visualize-retrieved-biophysical-outputs","implicit":true,"key":"gPXBy1mRxy"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"RRbE462qHd"}],"key":"fU24ndKaS3"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can also visualize the retrieved biophysical products in QGIS. The rasters should be saved in ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XA3Rose0MU"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"“./dataset/sentinel_imagery”","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ApRGcjtUN3"}],"key":"GcssojxLyA"}],"key":"itNemG3I4P"}],"key":"frgarQHZ4h"}],"key":"tfJSIAgd7i"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get extent [minx, maxx, miny, maxy] of scene\nte = [float(s2_cube['x'].min()), float(s2_cube['x'].max()), float(s2_cube['y'].min()), float(s2_cube['y'].max())]\n\n# visualizing outputs \nvariables = ['LAI', 'Cab', 'Cw']\n\nfig, axes = plt.subplots(1,3, figsize=(12, 6))\nfor i,var in enumerate(variables):\n    name, unit, _ = PARAM_PROPS[var]\n    range_lim = prosail_bounds[var]\n    \n    if var == 'LAI':\n        cmap = 'YlGn'\n    elif var == 'Cab':\n        cmap = 'PiYG'\n    else:\n        cmap = 'BrBG'\n    \n    # entire ROI\n    ax = axes[i]\n    ar = bio_dict[var]\n    \n    im = ax.imshow(ar, vmin=range_lim[0], vmax=range_lim[1], cmap=cmap, extent = te)\n    ax.set_title(f'{name}', fontsize=14)\n    # Add colorbar \n    cbar = fig.colorbar(im, ax=ax, shrink=0.95, orientation='horizontal')\n    cbar.set_label(f'{var} ({unit})', fontsize=12)  # Add title to colorbar\n\nplt.tight_layout()\nplt.show()","key":"KvJVVhVFyV"},{"type":"output","id":"bj-C0t4ggBPYd2ka8AI6r","data":[],"key":"gkHg2xMhqs"}],"key":"BrzC34GTqj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YNomwDnS35"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"vZi7wstHsz"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Hybrid RTM approach is an effective method combining physically-based modeling with machine learning algotithms","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"qDTDz3CXcI"}],"key":"NtoHEEqE9B"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Since the calibration is performed with synthetic dataset, no in-situ data is required making it globally applicable","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IzUXAT4jW4"}],"key":"Xy6vdQkBEm"}],"key":"VqnDan1uUC"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"QVng0nQ2ei"}],"key":"gsfU6LpnVc"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The effectiveness of these methods also depend on the assumptions made in the PRO4SAIL model, which assumes a horizontally and vertically homogeneous turbid vegetation layer. These methods tend to work relatively well in structurally homogenous vegetation such as herbaceous crops/vegetation but uncertainties may be greater in complex agro-forestry systems which have more heterogeneous characteristics (e.g. clumping, multiple vegetation layers, senecent vegetation).","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NcbC8H3ooW"}],"key":"IfKDFqq8Mh"}],"key":"B6NpYFaX1M"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"qNVwvW2Nc5"}],"key":"YPpFUafNo9"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Please feel free comment any thoughts. This is work in progress!!!","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"uU4YaB4dMJ"}],"key":"k425ISp6Ms"}],"key":"qaHPyUsxPE"}],"key":"kwdFPUPXiJ"}],"key":"TmkPlRL7MS"},"references":{"cite":{"order":[],"data":{}}}}