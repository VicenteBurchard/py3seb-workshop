{"version":2,"kind":"Notebook","sha256":"e3ec818554464b92437101b0779c21ee57272bca87f31580b4f5f9eab043312e","slug":"uav-3seb","location":"/203-UAV_3SEB.ipynb","dependencies":[],"frontmatter":{"title":"Implementation of 3SEB with high resolution imagery","subtitle":"Notebook to run different 3SEB variants using UAV imagery","authors":[{"nameParsed":{"literal":"Vicente Burchard-Levine","given":"Vicente","family":"Burchard-Levine"},"name":"Vicente Burchard-Levine","orcid":"0000-0003-0222-8706","email":"vicente.burchard@csic.es","affiliations":["SpecLab-CSIC"],"id":"contributors-Users\\06325897T\\Nextcloud\\1_Projects\\ILINK24\\Workshop_3SEB_UCDavis\\py3SEB-workshop\\203-UAV_3SEB-generated-uid-0","corresponding":true},{"nameParsed":{"literal":"Hector Nieto","given":"Hector","family":"Nieto"},"name":"Hector Nieto","orcid":"0000-0003-4250-6424","email":"hector.nieto@ica.csic.es","affiliations":["ICA-CSIC"],"id":"contributors-Users\\06325897T\\Nextcloud\\1_Projects\\ILINK24\\Workshop_3SEB_UCDavis\\py3SEB-workshop\\203-UAV_3SEB-generated-uid-1"}],"affiliations":[{"id":"SpecLab-CSIC","name":"SpecLab-CSIC"},{"id":"ICA-CSIC","name":"ICA-CSIC"}],"subject":"Tutorial","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"open_access":false,"github":"https://github.com/VicenteBurchard/py3SEB-workshop","keywords":["MyST Markdown","py3SEB Tutorial"],"numbering":{"title":{"offset":1}},"thumbnail":"/WES_experimental_des-d870638e1ddfdc0f27f365e72ae12197.png","exports":[{"format":"ipynb","filename":"203-UAV_3SEB.ipynb","url":"/203-UAV_3SEB-b452068ffd52c2c8c493090e58c8adaa.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oNWqTalDJi"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"TR6FkjVsjJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Interactive jupyter notebook showing the implementation of 3SEB with high resolution imagery obtained from uncrewed aerial imagery (UAVs).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bd8Q4uxhCT"}],"key":"nbqwKHUVFJ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This notebook will go through the pre-processing of of 3SEB inputs and discuss different versions of 3SEB, including:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"v02qnzXXRO"}],"key":"ryBUGOnzxf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Separating leaf and soil temperatures using contextual methods","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"twjRZ5CAx5"}],"key":"u7NcItKEQp"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Pre-processing inputs and parameters to force 3SEB","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"meZ07QPk0p"}],"key":"zvjDSRWGm8"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Running 3SEB variants (3SEB-PT, 3SEB-2T and 3SEB-3T)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"CHTFYjxz2Q"}],"key":"WgVtDH4DQ6"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Evaluating flux and temperature outputs against measurements","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"yAMa4WKTwB"}],"key":"Dvha7aylPZ"}],"key":"WiQXB1yazk"}],"key":"C5qwQvQ6AP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Instructions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bqXwHFbY9L"}],"identifier":"instructions","label":"Instructions","html_id":"instructions","implicit":true,"key":"kGN0IMyz7R"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Read carefully all the text and follow the instructions.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"kOPjuVNC3Y"}],"key":"vxCzhtk3lx"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"n8pyyC6lba"}],"key":"eBsxfK7Vun"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Once each section is read, run the jupyter code cell underneath (marked as ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CxUkbfsl0w"},{"type":"inlineCode","value":"[]","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Q1tmYkzJrV"},{"type":"text","value":") by clicking the icon ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"dv3w0J59OE"},{"type":"inlineCode","value":"Run","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ppqBDVniGw"},{"type":"text","value":", or pressing the keys SHIFT+ENTER of your keyboard.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"yl92Pl2E7w"}],"key":"M1leVMsGdY"}],"key":"YlYtBanlQz"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"To start, please run the following cell to import all the packages required for this notebook. Once you run the cell below, an acknowledgement message, stating all libraries were correctly imported, should be printed on screen.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"EvIsTFj1pt"}],"key":"O2ECjVKJbo"}],"key":"MMfmyc9l67"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import Libraries","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VUxHyA1Wce"}],"identifier":"import-libraries","label":"Import Libraries","html_id":"import-libraries","implicit":true,"key":"DsWZ4bhvEq"}],"key":"WG3OxDyP9N"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib widget\nimport numpy as np\nfrom osgeo import gdal\nfrom pathlib import Path\nimport pandas as pd\nimport geopandas as gpd\nfrom pyTSEB import TSEB\nfrom pyTSEB import meteo_utils as met\nfrom pyTSEB import net_radiation as rad\nfrom pyTSEB import resistances as res\nfrom pyTSEB import energy_combination_ET as EC\nfrom py3seb import  py3seb \nimport matplotlib.pyplot as plt\nfrom osgeo import gdal\nimport pyDMS.pyDMSUtils as gu\nimport matplotlib.patches as mpatches\nfrom matplotlib.colors import ListedColormap\n\nprint('libraries imported correctly!')","key":"LXZ3pxkfAD"},{"type":"output","id":"K8p8MDSoL-6mVpS5qVB5I","data":[],"key":"Tf5ND1l3Kc"}],"key":"Liwvsx82Qj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The leaf and soil temperatures in 3SEB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZW8dPPYwMh"}],"identifier":"the-leaf-and-soil-temperatures-in-3seb","label":"The leaf and soil temperatures in 3SEB","html_id":"the-leaf-and-soil-temperatures-in-3seb","implicit":true,"key":"AS3Mn2VkwL"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In 3SEB, the evapotranspiration (ET) and energy fluxes from overstory vegetation, understory vegetation and soil components are solved for each component layer. For adequate flux partitioning accross landscape sources, we need estimates of overstory canopy (","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"hqDDpIt1mO"},{"type":"inlineMath","value":"T_C","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"wOCTyRDDLk"},{"type":"text","value":"), understory canopy (","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"nOM0SF6Crw"},{"type":"inlineMath","value":"T_{C, sub}","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{C, sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>","key":"BLNPbhfKGz"},{"type":"text","value":")  and soil (","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"uWfSPFpDKN"},{"type":"inlineMath","value":"T_S","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"J5MD8yplIS"},{"type":"text","value":") temperatures to retrieve sensible heat fluxes from the different sources. In the orginal formulation of 3SEB, the resistance framework is first treated as a parallel (i.e., uncoupled) tree-substrate system to obtain tree canopy sensible heat flux (","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"nrxbK1rfDv"},{"type":"inlineMath","value":"H_C","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"JAT8lXKBQZ"},{"type":"text","value":") and substrate (understory vegetation+soil) (","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"kokAt6pd9b"},{"type":"inlineMath","value":"H_{sub}","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">H_{sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"ZZVYV6AVGW"},{"type":"text","value":") using the heat transport equations:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"MsK3XVcXMY"}],"key":"ZXOTkfBy6c"},{"type":"math","value":"H_C &= \\rho C_p \\frac{T_C - T_{a}} {R_A}\\\\\nH_{sub} &= \\rho C_p \\frac{T_{sub} - T_{a}} {R_A+R_{sub}}","label":"ec-hc-hsub","identifier":"ec-hc-hsub","html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>H</mi><mi>C</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>ρ</mi><msub><mi>C</mi><mi>p</mi></msub><mfrac><mrow><msub><mi>T</mi><mi>C</mi></msub><mo>−</mo><msub><mi>T</mi><mi>a</mi></msub></mrow><msub><mi>R</mi><mi>A</mi></msub></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>H</mi><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>ρ</mi><msub><mi>C</mi><mi>p</mi></msub><mfrac><mrow><msub><mi>T</mi><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mi>a</mi></msub></mrow><mrow><msub><mi>R</mi><mi>A</mi></msub><mo>+</mo><msub><mi>R</mi><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align*}\nH_C &amp;= \\rho C_p \\frac{T_C - T_{a}} {R_A}\\\\\nH_{sub} &amp;= \\rho C_p \\frac{T_{sub} - T_{a}} {R_A+R_{sub}}\n\\end{align*}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.9927em;vertical-align:-2.2463em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7463em;\"><span style=\"top:-4.7463em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.2463em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7463em;\"><span style=\"top:-4.7463em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.2463em;\"><span></span></span></span></span></span></span></span></span></span></span></span>","enumerator":"1","html_id":"ec-hc-hsub","key":"Cc900iot9z"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Subsequently, the substrate fluxes and temperatures are further separated incorporating a series (i.e. coupled) approach:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"h5RVIQuyVE"}],"key":"ugIVVk7cd3"},{"type":"math","value":"H_{C,sub} &= \\rho C_p \\frac{T_{C,sub} - T_{ac}} {R_X}\\\\\nH_s &= \\rho C_p \\frac{T_S - T_{ac}} {R_S}","label":"ec-hcsub-hs","identifier":"ec-hcsub-hs","html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>H</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>ρ</mi><msub><mi>C</mi><mi>p</mi></msub><mfrac><mrow><msub><mi>T</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub><mo>−</mo><msub><mi>T</mi><mrow><mi>a</mi><mi>c</mi></mrow></msub></mrow><msub><mi>R</mi><mi>X</mi></msub></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>H</mi><mi>s</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>ρ</mi><msub><mi>C</mi><mi>p</mi></msub><mfrac><mrow><msub><mi>T</mi><mi>S</mi></msub><mo>−</mo><msub><mi>T</mi><mrow><mi>a</mi><mi>c</mi></mrow></msub></mrow><msub><mi>R</mi><mi>S</mi></msub></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align*}\nH_{C,sub} &amp;= \\rho C_p \\frac{T_{C,sub} - T_{ac}} {R_X}\\\\\nH_s &amp;= \\rho C_p \\frac{T_S - T_{ac}} {R_S}\n\\end{align*}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.9927em;vertical-align:-2.2463em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7463em;\"><span style=\"top:-4.7463em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.2463em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7463em;\"><span style=\"top:-4.7463em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.3603em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.2463em;\"><span></span></span></span></span></span></span></span></span></span></span></span>","enumerator":"2","html_id":"ec-hcsub-hs","key":"R8yPUvKLRL"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Since ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"XnZSHj9ae9"},{"type":"inlineMath","value":"T_C","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"rDr9XQ8CzW"},{"type":"text","value":", ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"OPWhtuCXR0"},{"type":"inlineMath","value":"T_{C,sub}","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{C,sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>","key":"Jzsg2sJSHs"},{"type":"text","value":" and ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"RFhQ2GLbfx"},{"type":"inlineMath","value":"T_S","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"TcPQgZb6lF"},{"type":"text","value":" are unknown apriori, the original 3SEB formulation (3SEB-PT) implements a Priestley-Taylor (PT) formulation, as in ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"Zofptx4joe"},{"type":"cite","url":"https://doi.org/10.1016/0168-1923(95)02265-Y","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Norman et al. (1995)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"TkyqZjloo1"}],"kind":"narrative","label":"Norman_1995","identifier":"https://doi.org/10.1016/0168-1923(95)02265-Y","enumerator":"1","key":"w17btrmGYX"},{"type":"text","value":", to compute a first estimate of the canopy LE and H for both overstory and understory.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"Fc89GNYgbH"}],"key":"Ht2VZ28rg3"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"For more information on the 3SEB-PT resistance scheme, refer to ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"rwyrUHD227"},{"type":"cite","url":"https://onlinelibrary.wiley.com/doi/full/10.1111/gcb.16002","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Burchard-Levine et al., 2022","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"Ox4YryqnZq"}],"kind":"narrative","label":"Burchard_Levine_2021","identifier":"https://onlinelibrary.wiley.com/doi/full/10.1111/gcb.16002","enumerator":"2","key":"cQ0XMIeIsi"}],"key":"vvfHlsM53u"},{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"However, the use of very high spatial TIR imagery can be especially relevant in row crops with wide spacing and clumped vegetation such as almond orchards where we can directly retrieve these different component temperatures and avoid the initial assumptions of potential transpiration made with the PT formulation. However, in the case of tree crops that have cover crops over the rows, it becomes more difficult to directly separate the cover crop temperature from the soil component. As such, in this exercise, we will consider different 3SEB versions that assume that the temperature retrived over the cover crop refers to canopy temperature ","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"l8x9x6BE5m"},{"type":"inlineMath","value":"T_{C,sub}","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{C,sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>","key":"z8SBb6nwKC"},{"type":"text","value":" and another that assumes that is the combined substrate (vegetation+soil) temperature (","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"kK1oZwoXkI"},{"type":"inlineMath","value":"T_{sub}","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"oLfhUGnJBB"},{"type":"text","value":").","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"exF6fmBm2v"}],"key":"nul5FKcOA5"},{"type":"heading","depth":2,"position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"3SEB versions","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"bQZWzSi31y"}],"identifier":"id-3seb-versions","label":"3SEB versions","html_id":"id-3seb-versions","implicit":true,"key":"tFxJ06143p"},{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"In this notebook, we will implement three different 3SEB versions:","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"FwftLCCs8b"}],"key":"bHxMhrIHYb"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":30,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"strong","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"3SEB-PT","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"oExFJbblar"}],"key":"dMFvrpunnG"},{"type":"text","value":": implements a double Priestley-Taylor transpiration initialization for each vegetation canopy (i.e. tree and grass)","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"kozhkkw50Q"}],"key":"VLg4Vu1AwX"},{"type":"listItem","spread":true,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"strong","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"3SEB-2T","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"OTcRaTE24l"}],"key":"MT2Iia4PWA"},{"type":"text","value":": acquires tree and substrate temperature from high resolution imagery and implements a PT initalization in the substrate","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"vFgytImzrH"}],"key":"YqF1YYkjyc"},{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"strong","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"3SEB-3T","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"oIaS5uNIcY"}],"key":"tm1IX6PpQQ"},{"type":"text","value":": acquires tree , cover crop and soil temperatures directly from high resolution imagery","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"nhosZlGnAm"}],"key":"aaGu80bmep"}],"key":"BNqxcHnXOB"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Also for comparison purposes, we will also run TSEB-PT.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"vfzS79DKTw"}],"key":"nwDdQyns4d"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"sWC2uiZUgy"}],"key":"fLmaZqWpDK"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"3SEB-2T and 3SEB-3T are very new developments and have not yet been extensively tested. It has not been published yet and may need further refinements.","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"ROviruVGZq"}],"key":"xRjmZc4tpP"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"This is work in progress so we are happy to receive any feedback!!","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"pa4IjhVTDG"}],"key":"XiOfyPbdMU"}],"key":"XII0RDCvZI"},{"type":"admonition","kind":"important","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","key":"izp8oAN6iq"}],"key":"VYMIPLsw0U"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"Despite that UAV technology can provide very high spatial resolution information we have to be aware that TSEB/3SEB, as most ot the resistance-based energy balance model, must be applied at an adequate spatial domain to comply to the assumptions and the physical formulations inherent in it. Therefore ","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"pvukmqSCtE"},{"type":"strong","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"it is not possible","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"semqJZ9LEl"}],"key":"N3LMMCu6gE"},{"type":"text","value":" to run TSEB/3SEB at leaf-level scale (i.e. 10cm), as the formulations of radiative transfer and turbulent exchanche that it relies upon, require to run TSEB/3SEB at a scale in the order of meters.","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"WsExS3kXQo"}],"key":"sSVDFug01c"}],"key":"Iwj9a2UGDb"},{"type":"heading","depth":2,"position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"Case study and dataset","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"W4wNIkHgdS"}],"identifier":"case-study-and-dataset","label":"Case study and dataset","html_id":"case-study-and-dataset","implicit":true,"key":"GPeGkmnWZh"},{"type":"paragraph","position":{"start":{"line":51,"column":1},"end":{"line":51,"column":1}},"children":[{"type":"text","value":"We will implement 3SEB over an experimental Almond orchard located in California, USA.","position":{"start":{"line":51,"column":1},"end":{"line":51,"column":1}},"key":"WMw69J9RAM"}],"key":"GHvMmXoAOv"},{"type":"container","kind":"figure","children":[{"type":"image","url":"/WES_experimental_des-d870638e1ddfdc0f27f365e72ae12197.png","alt":"WES experimental design","key":"NcwtlUqghM","urlSource":"./input/figures/WES_experimental_design_layout.png"},{"type":"caption","children":[{"type":"paragraph","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"children":[{"type":"captionNumber","kind":"figure","label":"WES-Design","identifier":"wes-design","html_id":"wes-design","enumerator":"1","children":[{"type":"text","value":"Figure ","key":"yFkqQ8CNEP"},{"type":"text","value":"1","key":"ZOMUQX2CFJ"},{"type":"text","value":":","key":"uyA6L6iEos"}],"template":"Figure %s:","key":"NQg5U4SuyC"},{"type":"text","value":"Experimental design of Almond orchards with different irrigation treatments and cover crop (CC) presence (surface irrgation+CC, surface irrigation+NoCC, subsurface irrigation+CC, subsurface irrigation+noCC)","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"YkIqyBuM77"}],"key":"IN6TqOEzTR"}],"key":"PeQIDV3l3D"}],"label":"WES-Design","identifier":"wes-design","enumerator":"1","html_id":"wes-design","key":"lFHhLB1p24"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"To reduce computational needs, we will work only on the surface cover crop treatment (Conv + CC or Surface_CC).","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"mcCdqrXfAt"}],"key":"RLSkxwVIFg"}],"key":"x0HEWM7mtw"}],"key":"A98wzaXqmB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Generating 3SEB inputs: ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"seRk8wkDHG"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"separating temperature components","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IQAKSA3FhD"}],"key":"iVn8lrR8Yb"}],"identifier":"generating-3seb-inputs-separating-temperature-components","label":"Generating 3SEB inputs: separating temperature components","html_id":"generating-3seb-inputs-separating-temperature-components","implicit":true,"key":"vQwqgPlUBt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Since the UAV imagery have a very high spatioal resolution (<10cm), we can retrive effective leaf/canopy and soil temperatures directly from the imagery.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mWTLIiJe22"}],"key":"nYmmM7NZhh"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"To effectively separate the different temperature components, we will use both NDVI and canopy height models (CHM) as constraints. The later especially useful to separate tree and cover crop temperatures.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WdgzpqzaAm"}],"key":"TMwpcn1AaP"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"PxHdwwtrfG"}],"key":"OWJaF5OFGa"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"This is just an example of one simple method that can be used to retrieve the different component temperatures. Other methods can also be applied.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"zTJuOW9N0Q"}],"key":"ZbIkLT3z3x"}],"key":"UyZk2QSnUb"}],"key":"IVPkZLNU5k"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open and visualize imagery","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uqaS1QyId3"}],"identifier":"open-and-visualize-imagery","label":"Open and visualize imagery","html_id":"open-and-visualize-imagery","implicit":true,"key":"PMGUAOtlqj"}],"key":"RfGJyF85fx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# workdir \ndatadir = Path('./dataset')\nuav_dir = datadir / 'uav_imagery'\n\n# ndvi\nndvi_file = uav_dir / f'ndvi_surface_CC_10cm.tif'\nndvi_fid = gdal.Open(str(ndvi_file))\nndvi_ar = ndvi_fid.GetRasterBand(1).ReadAsArray()\n\n# canopy height\nch_file = uav_dir / f'chm_surface_CC_10cm.tif'\nch_fid = gdal.Open(str(ch_file))\nch_ar = ch_fid.GetRasterBand(1).ReadAsArray()\n#ch_ar[ch_ar<0] = np.nan\nch_ar[ch_ar>20] = np.nan\n\n# land surface temperature\nlst_file = uav_dir / f'lst_surface_CC_10cm.tif'\nlst_fid = gdal.Open(str(lst_file))\nlst_ar = lst_fid.GetRasterBand(1).ReadAsArray()\n\n# use LST as template for raster info\n## Get raster size\ncols = lst_fid.RasterXSize\nrows = lst_fid.RasterYSize\n## geotransform\ngt = lst_fid.GetGeoTransform()\nminx, maxy = gt[0], gt[3]\nmaxx = minx + gt[1]*cols\nminy = maxy + gt[5]*rows\n## extent\nte = [minx, maxx, miny, maxy]\n## spatial projection\nproj = lst_fid.GetProjection()\n\n# plot UAV imagery inputs to visualize\nfig, axes = plt.subplots(2,3, figsize = (14,10), constrained_layout=True)\nax1 = axes[0,0]\nim1 = ax1.imshow(lst_ar, cmap='Spectral_r', vmin=300, vmax=320, extent = te)\nax1.set_title('LST')\n\nax2 = axes[0,1]\nim2 = ax2.imshow(ndvi_ar, cmap='YlGn', vmin=0.3, vmax=0.8, extent = te)\nax2.set_title('NDVI')\n\nax3 = axes[0,2]\nim3 = ax3.imshow(ch_ar, cmap='viridis', vmin=0., vmax=5, extent = te)\nax3.set_title('Canopy Height (CH)')\n\n\n# zoom in\nax4 = axes[1,0]\nim4 = ax4.imshow(lst_ar, cmap='Spectral_r', vmin=300, vmax=320, extent = te)\nax4.set_xlim(655290, 655320)\nax4.set_ylim(4156800, 4156830)\ncb = plt.colorbar(im4, ax=ax4, orientation='horizontal')\ncb.set_label('LST (K)', fontsize=14)\n\nax5 = axes[1,1]\nim5 = ax5.imshow(ndvi_ar, cmap='YlGn', vmin=0.3, vmax=0.8, extent = te)\nax5.set_xlim(655290, 655320)\nax5.set_ylim(4156800, 4156830)\ncb = plt.colorbar(im5, ax=ax5, orientation='horizontal')\ncb.set_label('NDVI (-)', fontsize=14)\n\nax6 = axes[1,2]\nim6 = ax6.imshow(ch_ar, cmap='viridis', vmin=0., vmax=5, extent = te)\nax6.set_xlim(655290, 655320)\nax6.set_ylim(4156800, 4156830)\ncb = plt.colorbar(im6, ax=ax6, orientation='horizontal')\ncb.set_label('CH (m)', fontsize=14)\nplt.show()","key":"yO89YA3Bd9"},{"type":"output","id":"5euCsAH3_qimbbMndxohE","data":[],"key":"lmWFX1HF3j"}],"key":"gHNcpMBbGe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Obtaining component tempeatures from contextual method","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IEtux9tahJ"}],"identifier":"obtaining-component-tempeatures-from-contextual-method","label":"Obtaining component tempeatures from contextual method","html_id":"obtaining-component-tempeatures-from-contextual-method","implicit":true,"key":"pF3ZoNfrLr"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We will obtain ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mgeg1TcOcb"},{"type":"inlineMath","value":"T_C","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"POnXkzOLTn"},{"type":"text","value":", ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tUrWmsRm64"},{"type":"inlineMath","value":"T_{C,sub}","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{C,sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>","key":"avAI3PMuEf"},{"type":"text","value":" and ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"NvkpS7Gf2j"},{"type":"inlineMath","value":"T_S","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"Msprx5OPRx"},{"type":"text","value":" by searching for pure vegetation and soil pixels in a contextual spatial domain . That is, in a coarse resolution spatial grid, consistent with the TSEB physical assumptions, we will assign for each of its cells the canopy and soil temperatures corresponding to the average temperature for the original LST resoltuion pixels that are considered, respectively, bare soil, cover crop vegetation and tree crop vegetation.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DfUQjK284H"}],"key":"Fz77aL3uVM"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"Q59bgQdUBO"}],"key":"Xvgtg4NkYS"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In this case we assume that TSEB will be run at 8 m spatial resolution, as it is spatial domain large enough to include the canopy/interrow system in order to be consistent with the radiative transfer modelling in the rows.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"StVcPSWZgJ"}],"key":"xyNuuK61BA"}],"key":"AbJxxNkNdv"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"In this example, we simply consider:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"oCl3011pgc"}],"key":"zaPCtfcQpf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"tree crops as pixels with NDVI > 0.8 & canopy heights > 1.5m","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"cy4zdbgQto"}],"key":"mu6Nk6zM7t"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"cover crops as pixels with NDVI > 0.8 & canopy heights < 0.4m","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tfMNhzvtFU"}],"key":"y91bDEVm4j"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"soil as pixels with NDVI < 0.4 & canopy heights < 0.4","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Yv9UW7fKDB"}],"key":"SJG5cvuvV8"}],"key":"wXeVfTsn6k"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"We will create masks for each of these conditions to isolate the component temperatures of each landscape source (i.e., tree crop, cover crop and soil)","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ElZ3w11Vi2"}],"key":"CgAtGjaWTK"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"U4NFlPtLjm"}],"key":"KnHrjciW4x"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Note that these pure vegetation and soil NDVI values, along with crop height, might change due to different spectral cameras and different crop/soil types.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"l1O6bCY1uQ"}],"key":"NuUtYc2z6u"}],"key":"YQ3prvOes5"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"gKrmeg7yxF"}],"key":"Ajmn1f7i3C"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Other more sophisticated classifcation algorithms (e.g. LULC classificationn with RF) can be applied to better separate the different landscape components. This is just a simple illustrative example.","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"zdNihWbyTD"}],"key":"kEfyKtrg8j"}],"key":"qSdXlgl9uh"}],"key":"hfIb4LmCgc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# RGB file \nrgb_file = uav_dir / f'rgb_surface_CC_10cm.tif'\nrgb_fid = gdal.Open(str(rgb_file))\nblue_ar = rgb_fid.GetRasterBand(1).ReadAsArray()\ngreen_ar = rgb_fid.GetRasterBand(2).ReadAsArray()\nred_ar = rgb_fid.GetRasterBand(2).ReadAsArray()\n# stack arrays\nrgb_image = np.dstack((red_ar, green_ar, blue_ar))\n# make image brighter for visualization\nrgb_image = np.clip(rgb_image * 1.5, 0, 255) / 255\n\n# set up masks to isolate different \n# overstory mask \nmask_ov = np.logical_and(ndvi_ar > 0.8, ch_ar > 1.5)\n\n# understory mask \nmask_un = np.logical_and(ndvi_ar > 0.8, ch_ar < 0.4)\n\n# soil mask \nmask_soil = np.logical_and(ndvi_ar < 0.4, ch_ar < 0.4)\n\n# substrate mask \nmask_sub = np.logical_or(mask_un, mask_soil)\n\n# Tc\nTc_ar = lst_ar.copy()\n## all non-tree pixels as nan\nTc_ar[~mask_ov] = np.nan\n\n# Tc_sub\nTc_sub_ar = lst_ar.copy()\n## all non-grass pixels as nan\nTc_sub_ar[~mask_un] = np.nan\n\n#Ts\nTs_ar = lst_ar.copy()\n## all non-soil pixels as nan\nTs_ar[~mask_soil] = np.nan\n\n#Tsub \nTsub_ar = lst_ar.copy()\n## all non-substrate pixels as nan\nTsub_ar[~mask_un] = np.nan\n\n## create classification array\nclass_ar = lst_ar.copy()\nclass_ar[:] = np.nan\nclass_ar[mask_ov] = 1\nclass_ar[mask_un] = 2\nclass_ar[mask_soil] = 3\n\n# Define discrete colors for each category (1=tree, 2=grass, 3=soil)\ncmap = ListedColormap(['darkgreen', 'yellowgreen', 'saddlebrown'])\n\n# Define a normalization so the values map to 0, 1, 2 in the colormap\nbounds = [0.5, 1.5, 2.5, 3.5]\nnorm = plt.matplotlib.colors.BoundaryNorm(bounds, cmap.N)\n\n\nfig, axes = plt.subplots(2,2, figsize = (12,10), constrained_layout=True)\nax1 = axes[0,0]\nimg = ax1.imshow(class_ar, cmap=cmap, norm=norm, extent=te)\n\n# Create legend manually\nlegend_labels = {\n    1: 'Tree Crop',\n    2: 'Cover crop',\n    3: 'Soil'\n}\nlegend_colors = ['darkgreen', 'yellowgreen', 'saddlebrown']\n\npatches = [mpatches.Patch(color=legend_colors[i], label=legend_labels[i+1]) for i in range(3)]\nax1.legend(handles=patches, loc='upper right')\n#ax1.set_xlim(655290, 655320)\n#ax1.set_ylim(4156750, 4156780)\n\nax2 = axes[0,1]\nax2.imshow(class_ar, cmap=cmap, norm=norm, extent = te, alpha=1)\n#ax2.imshow(lst_ar, cmap='Spectral_r', vmin=300, vmax=320, extent = te, alpha=0.8)\n\nax2.set_xlim(655288, 655320)\nax2.set_ylim(4156800, 4156830)\n\nax3 = axes[1,0]\nim3 = ax3.imshow(lst_ar, cmap='Spectral_r', vmin=300, vmax=320, extent = te)\n\nax3.set_xlim(655288, 655320)\nax3.set_ylim(4156800, 4156830)\n#cb = plt.colorbar(im3, ax=ax3, orientation='vertical', shrink = 0.65)\n#cb.set_label('LST (K)', fontsize=14)\nax4 = axes[1,1]\nim4 = ax4.imshow(rgb_image, extent = te)\nax4.set_xlim(655288, 655320)\nax4.set_ylim(4156800, 4156830)\n#ax3.set_xlim(655290, 655320)\n#cb.set_label('CH (m)', fontsize=14)\nplt.show()","key":"UCQzR1E4cG"},{"type":"output","id":"4A_GL6SKkVNPzceCxbYqi","data":[],"key":"iMTps0vHPL"}],"key":"P2QXBsXqat"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Save component temperature imagery and fractional covers","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JvnyWuejQI"}],"identifier":"save-component-temperature-imagery-and-fractional-covers","label":"Save component temperature imagery and fractional covers","html_id":"save-component-temperature-imagery-and-fractional-covers","implicit":true,"key":"bFuBxnHbEN"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will take advantage of this high resoltion imagery to calcualte the fractional covers of each landscape source (tree crop, cover crop and soil). We will save these as geotiff to then later resampled to 8m as inputs for TSEB/3SEB.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"l0W32lLRhO"}],"key":"EowAFt4nGo"}],"key":"B6BcY7gvvQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# fc (tree canopy fraction)\nfc_ar = lst_ar.copy()\nfc_ar[mask_ov] = 1\nfc_ar[~mask_ov] = 0\n\n# fs (soil fraction)\nfs_ar = lst_ar.copy()\nfs_ar[mask_soil] = 1\nfs_ar[~mask_soil] = 0\n\n# fc_sub (cover crop fraction)\nfc_sub_ar = lst_ar.copy()\nfc_sub_ar[mask_un] = 1\nfc_sub_ar[~mask_un] = 0\n\n# set up filename for outputs (fractional covers)\n## tree crop fraction\noutfile_fc_mask = uav_dir / f'Fc_surface_CC_10cm.tif'\n## cover crop fraction\noutfile_fc_sub_mask = uav_dir / f'Fc_sub_surface_CC_10cm.tif'\n## soil fraction\noutfile_fs_mask = uav_dir / f'Fs_sub_surface_CC_10cm.tif'\n\n# set up filename for outputs (component temperatures)\noutfile_Tc = uav_dir / f'Tc_surface_CC_10cm.tif'\noutfile_Tc_sub = uav_dir / f'Tc_sub_surface_CC_10cm.tif'\noutfile_Ts = uav_dir / f'Ts_surface_CC_10cm.tif'\noutfile_Tsub= uav_dir / f'Tsub_surface_CC_10cm.tif'\n\nrows, cols = np.shape(lst_ar)\n\nprint('Saving inputs at 10cm...')\n# Save output\ninput_nodata = np.nan\ndriver = gdal.GetDriverByName('GTiff')\n# Tc\nds = driver.Create(str(outfile_Tc), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(Tc_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds\n\n#Tc_sub\nds = driver.Create(str(outfile_Tc_sub), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(Tc_sub_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds \n\n#Ts\nds = driver.Create(str(outfile_Ts), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(Ts_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds\n\n#Tsub\nds = driver.Create(str(outfile_Tsub), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(Tsub_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds\n\n#Fc\nds = driver.Create(str(outfile_fc_mask), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\n\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(fc_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds \n\n#Fs\nds = driver.Create(str(outfile_fs_mask), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\n\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(fs_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds \n\n#Fc_sub\nds = driver.Create(str(outfile_fc_sub_mask), cols, rows, 1, gdal.GDT_Float32)\nds.SetGeoTransform(gt)\nds.SetProjection(proj)\nband = ds.GetRasterBand(1)\nband.SetNoDataValue(input_nodata)\nband.WriteArray(fc_sub_ar)\nband.FlushCache()\nds.FlushCache()\ndel ds\n\nprint('Done!')","key":"LweUUnnySE"},{"type":"output","id":"YZwen2-LkFxYQMypSyWJ7","data":[],"key":"sgui8mzXhW"}],"key":"Po0Vduv2Ku"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"p9xHoyHyLe"}],"key":"FqXcMg3ab3"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"You can also visualize these outputs in QGIS","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dbGVeHZFZs"}],"key":"Cit4RsSRbd"}],"key":"oAJei4z8os"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Obtain average component temperatures over 8m grids","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"S9G5GMRXRk"}],"identifier":"obtain-average-component-temperatures-over-8m-grids","label":"Obtain average component temperatures over 8m grids","html_id":"obtain-average-component-temperatures-over-8m-grids","implicit":true,"key":"vmWfc0Oucq"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"We now need to obtain the average component temperatures at 8m grids. The next code block visualizes this.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dODGNXG3ZN"}],"key":"txhsG1cg6J"}],"key":"YzK1kMLTFv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# visualize grid layers\nvector_dir = datadir / 'vector_data'\ngrids_file = vector_dir / 'Grids_8m_surface_CC.geojson'\ngrids_df = gpd.read_file(grids_file, on_invalid=\"warn\")\n\n\nfig, axes = plt.subplots(1,3, figsize = (14,6), constrained_layout=True)\nax1 = axes[0]\nimg = ax1.imshow(rgb_image, extent=te)\ngrids_df.plot(ax=ax1, facecolor='none', edgecolor='white', linewidth=2, alpha=0.9, label='8m grids')\n\nlegend_element = mpatches.Patch(facecolor='none', edgecolor='white', label='8m grids')\n\nax1.legend(handles=[legend_element])\n\nax1.set_xlim(655288, 655320)\nax1.set_ylim(4156800, 4156830)\nax1.set_title('RGB', fontsize=16)\n#ax1.set_xlim(655290, 655320)\n#ax1.set_ylim(4156750, 4156780)\n\n# Define discrete colors for each category (1=tree, 2=grass, 3=soil)\ncmap = ListedColormap(['darkgreen', 'yellowgreen', 'saddlebrown'])\n\n# Define a normalization so the values map to 0, 1, 2 in the colormap\nbounds = [0.5, 1.5, 2.5, 3.5]\nnorm = plt.matplotlib.colors.BoundaryNorm(bounds, cmap.N)\nax2 = axes[1]\nax2.imshow(class_ar, cmap=cmap, norm=norm, extent = te, alpha=1)\n#grids_df.plot(ax=ax2, facecolor='none', edgecolor='orange', linewidth=1)\ngrids_df.plot(ax=ax2, facecolor='none', edgecolor='k', linewidth=2, alpha=0.9, label='8m grids')\n\nlegend_element = mpatches.Patch(facecolor='none', edgecolor='k', label='8m grids')\n\nax2.legend(handles=[legend_element])\n#ax2.imshow(lst_ar, cmap='Spectral_r', vmin=300, vmax=320, extent = te, alpha=0.8)\n\nax2.set_xlim(655288, 655320)\nax2.set_ylim(4156800, 4156830)\nax2.set_title('Pure component pixel selection', fontsize=16)\n\nax3 = axes[2]\nim3 = ax3.imshow(lst_ar, cmap='Spectral_r', vmin=300, vmax=320, extent = te)\ngrids_df.plot(ax=ax3, facecolor='none', edgecolor='k', linewidth=2, alpha=0.9, label='8m grids')\n\nax3.set_xlim(655288, 655320)\nax3.set_ylim(4156800, 4156830)\ncb = plt.colorbar(im3, ax=ax3, orientation='vertical', shrink = 0.65)\ncb.set_label('LST (K)', fontsize=14)\nax3.set_title('LST', fontsize=16)\nax3.legend(handles=[legend_element])\n\nplt.show()\n\n","key":"TS5XHri729"},{"type":"output","id":"XciTp4EWZFaVgS6UFR4O2","data":[],"key":"yeizwhq9Xq"}],"key":"HviJAM1UwF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Getting average source values with GDAL","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Oxcw2Yz2eM"}],"identifier":"getting-average-source-values-with-gdal","label":"Getting average source values with GDAL","html_id":"getting-average-source-values-with-gdal","implicit":true,"key":"G6IoDRdet2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this case, we will simply calculate the average LST values of each surface source (tree crop, cover and soil) at the 8m scale by using a mask for each source. For example, for tree crops, we mask out all non-tree crop pixels as ‘nan’ at 10cm scale and then get average values of all non-nan pixels within each 8m grid.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Pwqjp08HXs"}],"key":"RIB3MfQ0IG"},{"type":"heading","depth":4,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"save resampled grids to file","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fyRATZnijf"}],"identifier":"save-resampled-grids-to-file","label":"save resampled grids to file","html_id":"save-resampled-grids-to-file","implicit":true,"key":"a2vqHVyWiU"}],"key":"CTAix1V5ji"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# resample to 8m \ntarget_res = 8\n\n# set up outputfile name\noutfile_fc_8m = uav_dir / f'Fc_surface_CC_{target_res}m.tif'\noutfile_fc_sub_8m = uav_dir / f'Fc_sub_surface_CC_{target_res}m.tif'\noutfile_fs_8m = uav_dir / f'Fs_surface_CC_{target_res}m.tif'\n\noutfile_Tc_8m = uav_dir / f'Tc_surface_CC_{target_res}m.tif'\noutfile_Tc_sub_8m = uav_dir / f'Tc_sub_surface_CC_{target_res}m.tif'\noutfile_Ts_8m = uav_dir / f'Ts_surface_CC_{target_res}m.tif'\noutfile_Tsub_8m = uav_dir / f'Tsub_surface_CC_{target_res}m.tif'\n\noutfile_lst_8m = uav_dir / f'lst_surface_CC_{target_res}m.tif'\n\n# also chm \noutfile_chm_8m = uav_dir / f'Hc_surface_CC_{target_res}m.tif'\nprint(f'Resampling inputs to {target_res}m...')\n\n# fractional covers\ngdal.Warp(str(outfile_fc_8m), str(outfile_fc_mask), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'average')\ngdal.Warp(str(outfile_fc_sub_8m), str(outfile_fc_sub_mask), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'average')\ngdal.Warp(str(outfile_fs_8m), str(outfile_fs_mask), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'average')\n\n# component temperatures\ngdal.Warp(str(outfile_Tc_8m), str(outfile_Tc), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'min')\ngdal.Warp(str(outfile_Tc_sub_8m), str(outfile_Tc_sub), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'min')\ngdal.Warp(str(outfile_Ts_8m), str(outfile_Ts), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'average')\ngdal.Warp(str(outfile_Tsub_8m), str(outfile_Tsub), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'average')\n\ngdal.Warp(str(outfile_lst_8m), str(lst_file), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'average')\n\n# Also canopy height (get maximum in this case as this best describes surface roughness)\ngdal.Warp(str(outfile_chm_8m), str(ch_file), format='Gtiff', xRes=target_res, yRes=target_res, resampleAlg= 'max')\n\nprint(f'Done!')","key":"V8uAHyq6Fn"},{"type":"output","id":"vc64LnF2GPDEZ_D0VFRAv","data":[],"key":"ffy9DOWZMg"}],"key":"E00CybLltV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize resampled inputs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ue8atxtAY7"}],"identifier":"visualize-resampled-inputs","label":"Visualize resampled inputs","html_id":"visualize-resampled-inputs","implicit":true,"key":"VUGxKYUwRl"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can now open and visualize the temperature inputs we will use to run TSEB/3SEB","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YLXx7lycAE"}],"key":"MV1fy8gqje"}],"key":"NTeVrscvxW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# LST\nlst_file = uav_dir / 'lst_surface_CC_8m.tif'\nlst_fid = gdal.Open(str(lst_file))\nlst_ar = lst_fid.GetRasterBand(1).ReadAsArray()\nlst_ar[np.logical_or(lst_ar<275,lst_ar>400)] = np.nan\n\n# Tree crop temperature\nTc_file = uav_dir / 'Tc_surface_CC_8m.tif'\nTc_fid = gdal.Open(str(Tc_file))\nTc_ar = Tc_fid.GetRasterBand(1).ReadAsArray()\nTc_ar[np.logical_or(Tc_ar<275,Tc_ar>400)] = np.nan\n\n# Cover crop temperature\nTcc_file = uav_dir / 'Tc_sub_surface_CC_8m.tif'\nTcc_fid = gdal.Open(str(Tcc_file))\nTcc_ar = Tcc_fid.GetRasterBand(1).ReadAsArray()\nTcc_ar[np.logical_or(Tcc_ar<275,Tcc_ar>400)] = np.nan\n\n# Soil temperature\nTs_file = uav_dir / 'Ts_surface_CC_8m.tif'\nTs_fid = gdal.Open(str(Ts_file))\nTs_ar = Ts_fid.GetRasterBand(1).ReadAsArray()\nTs_ar[np.logical_or(Ts_ar<200,Ts_ar>500)] = np.nan\n\n# Soil temperature\nTsub_file = uav_dir / 'Tsub_surface_CC_8m.tif'\nTsub_fid = gdal.Open(str(Tsub_file))\nTsub_ar = Tsub_fid.GetRasterBand(1).ReadAsArray()\nTsub_ar[np.logical_or(Tsub_ar<200,Tsub_ar>500)] = np.nan\n\n\n\n# tree crop fractional cover\nFc_file = uav_dir / 'Fc_surface_CC_8m.tif'\nFc_fid = gdal.Open(str(Fc_file))\nFc_ar = Fc_fid.GetRasterBand(1).ReadAsArray()\nFc_ar[np.isnan(lst_ar)] = np.nan\n\n# soil fractional cover\nFs_file = uav_dir / 'Fs_surface_CC_8m.tif'\nFs_fid = gdal.Open(str(Fs_file))\nFs_ar = Fs_fid.GetRasterBand(1).ReadAsArray()\nFs_ar[np.isnan(lst_ar)] = np.nan\n\n\n# Cover crop fractional cover\nFcc_file = uav_dir / 'Fc_sub_surface_CC_8m.tif'\nFcc_fid = gdal.Open(str(Fcc_file))\nFcc_ar = Fcc_fid.GetRasterBand(1).ReadAsArray()\nFcc_ar[np.isnan(lst_ar)] = np.nan\n\n# the above Fcc refers to total landscape fraction of cover crop\n# we need to adjust this to obtain the fraction of cover crop over the substrate (cover crop + soil)\n# because this is the input that is needed in 3SEB\nFcc_ar = Fcc_ar / (Fcc_ar+Fs_ar)\n\n# Tree crop Canopy height model\nchm_file = uav_dir / 'Hc_surface_CC_8m.tif'\nHc_fid = gdal.Open(str(chm_file))\nHc_ar = Hc_fid.GetRasterBand(1).ReadAsArray()\nHc_ar[np.logical_or(Hc_ar==0,Hc_ar>10)] = np.nan\n\n# get raster metadata \n # get extent and info from reference dataset\nprj = lst_fid.GetProjection()\nulx, xres, xskew, uly, yskew, yres = lst_fid.GetGeoTransform()\nlrx = ulx + (lst_fid.RasterXSize * xres)\nlry = uly + (lst_fid.RasterYSize * yres)\n\nte = [minx, lrx, lry, uly]\n\n# plot UAV-based inputs\nfig, axes = plt.subplots(2,2, figsize=(12,10))\nax = axes[0,0]\nim = ax.imshow(lst_ar, vmin=290, vmax=320, cmap='coolwarm', extent = te)\nax.set_title('LST - Land Surface Temperature')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('LST (K)')  # Add title to colorbar\nmean_value = np.nanmean(lst_ar)\nax.text(1, 70, f'mean: {np.round(mean_value,2)}')\nax = axes[0,1]\nim = ax.imshow(Tc_ar, vmin=290, vmax=320, cmap='coolwarm',  extent = te)\nax.set_title('$T_c$ - Tree crop temperature')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('$T_c$ (K)')  # Add title to colorbar\nmean_value = np.nanmean(Tc_ar)\nax.text(1, 70, f'mean: {np.round(mean_value,2)}')\n\nax = axes[1,0]\nim = ax.imshow(Tcc_ar, vmin=290, vmax=320, cmap='coolwarm',  extent = te)\nax.set_title('$T_{c,sub}$ - Cover crop temperature')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('$T_c$ (K)')  # Add title to colorbar\n\nax = axes[1,1]\nim = ax.imshow(Ts_ar, vmin=290, vmax=320, cmap='coolwarm',  extent = te)\nax.set_title('$T_S$ - Soil temperature')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('Ts (K)')  # Add title to colorbar\n\nplt.show()","key":"ZlnyaC0xyu"},{"type":"output","id":"DRtR4ua42RRjyPzEH0PPZ","data":[],"key":"HeAgnoB9Aq"}],"key":"ho4hPpRkpK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Other inputs and parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JVDXPuDdEo"}],"identifier":"other-inputs-and-parameters","label":"Other inputs and parameters","html_id":"other-inputs-and-parameters","implicit":true,"key":"K5W0suo8eM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now that we have the main UAV-based inputs, we will now set up the rest of parameters and inputs to run TSEB/3SEB","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jx1souMR8L"}],"key":"imyJW5avfl"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Meterological forcings","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"atKZBSKltB"}],"identifier":"meterological-forcings","label":"Meterological forcings","html_id":"meterological-forcings","implicit":true,"key":"mE0awJLQG8"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"obtain meteo/EC data needed to run and evaluate TSEB/3SEB. In this case, we will obtain it from the in-situ EC tower located in the study site.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"tNhE2dyPNm"}],"key":"eLhql9bZM2"}],"key":"Dg5awxnZ6V"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# meteo\nmeteo_file = datadir /'insitu'/ 'WES_CSI_Format.csv'\nmeteo_ds = pd.read_csv(meteo_file, skiprows = [0,2,3])\n# soil data\nsoil_file =  datadir /'insitu'/ 'WES_Soil.dat'\nsoil_ds = pd.read_csv(soil_file, sep='\\t')\nmeteo_ds","key":"pzkQHBEP8t"},{"type":"output","id":"Ke3f4D0iTkxSQ9go1dY22","data":[],"key":"lloyo3WVj4"}],"key":"aU7RaA4Ro7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Extract Meteo data over overpass time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zMjvsxqo37"}],"identifier":"extract-meteo-data-over-overpass-time","label":"Extract Meteo data over overpass time","html_id":"extract-meteo-data-over-overpass-time","implicit":true,"key":"hnSdo4wFpd"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The UAV imagery was acquired on ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zdmOTuEbym"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"2024-04-16","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EyT56y65tz"}],"key":"eBdiC1H311"},{"type":"text","value":" between ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vu7JLWaWWf"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"10:45-11:15","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qnOE35VJ6v"}],"key":"tWO6kMzliH"},{"type":"text","value":" (standard time) so we take the sampling timestep of ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LzGQtZ22Hk"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"11:00","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IchCLJoaUE"}],"key":"hstWrOuG1X"},{"type":"text","value":" to extract the meterological forcings.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hzNPgiqd2w"}],"key":"cyq4uQv9zb"}],"key":"NZIupicej0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# study site information\nlat = 37.5456694\nlon = -121.2420336\nstdlon = -120\n\n# height of sensor measurements\nz_u = 5.5 # height wind speed measurement(m)\nz_t = 5.5 # height air temperature measurement(m)\n\n\ndate_mask = meteo_ds['TIMESTAMP'] == '4/16/24 11:00'\ndate_ts = pd.to_datetime('16/4/24 11:00')\n\nhour = date_ts.hour\n\ndoy = date_ts.dayofyear\n\n# sun zenith and azimuth angles\nsza, saa = met.calc_sun_angles(np.ones_like(Tc_ar) * lat,\n                                   np.ones_like(Tc_ar) * lon,\n                                   np.ones_like(Tc_ar) * stdlon,\n                                   np.ones_like(Tc_ar) * doy,\n                                   np.ones_like(Tc_ar) * hour)\nsza[sza > 90] = 90\n\nTa = meteo_ds['TA_3_1_1'].values[date_mask][0] + 273.15\nTa_ar = np.ones(Tc_ar.shape) * Ta\n\nEa = meteo_ds['e'].values[date_mask][0] * 10\nEa_ar = np.ones(Tc_ar.shape) * Ea\n\nU = meteo_ds['WS'].values[date_mask][0]\nU_ar = np.ones(Tc_ar.shape) * U\n\nP = meteo_ds['PA'].values[date_mask][0] * 10\nP_ar = np.ones(Tc_ar.shape) * P\n\nSdn = meteo_ds['SW_IN'].values[date_mask][0]\nSdn_ar = np.ones(Tc_ar.shape) * Sdn\nSdn_ar[sza > 90] = 0\n\nSup = meteo_ds['SW_OUT'].values[date_mask][0]\n\nLdn = meteo_ds['LW_IN'].values[date_mask][0]\nLdn_ar = np.ones(Tc_ar.shape) * Ldn\n\nLup = meteo_ds['LW_OUT'].values[date_mask][0]\n\n# save energy fluxes to outdict\nLE_obs = meteo_ds['LE'].values[date_mask][0]\n\nH_obs = meteo_ds['H'].values[date_mask][0]\n\nRn_obs = meteo_ds['NETRAD'].values[date_mask][0]\n\n# get IRT T_canopy\nT_canopy = meteo_ds['T_CANOPY'].values[date_mask][0] + 273.15\n\n# get soil heat flux data from soil dataset\nsoil_date_mask = soil_ds['TIMESTAMP'] == '4/16/24 11:00'\nG_obs = soil_ds['G'].values[soil_date_mask][0]\n\n\n# create an output dictionary to store results to then compare with model results\noutdict = {'date':[], 'hour':[], 'SWin_obs':[], 'SWout_obs':[],'LWin_obs':[], 'LWout_obs':[], 'Rn_obs':[], 'LE_obs':[], 'H_obs':[], 'G_obs':[], 'IRT_Canopy':[]}\noutdict['date'].append(date_ts) # date \noutdict['hour'].append(hour) # hour \noutdict['SWin_obs'].append(Sdn) # shortwave incoming radiation \noutdict['SWout_obs'].append(Sup) # shortwave outgoing radiation \noutdict['LWin_obs'].append(Ldn) # longwave incoming radiation \noutdict['LWout_obs'].append(Lup) # longwave outgoing radiation \noutdict['Rn_obs'].append(Rn_obs) # Net radiation\noutdict['LE_obs'].append(LE_obs) # latent heat flux\noutdict['H_obs'].append(H_obs) # sensible heat flux\noutdict['G_obs'].append(G_obs) # soil heat flux\noutdict['IRT_Canopy'].append(T_canopy) # IRT canopy temperature\n\nprint('Done!')","key":"EwXbK0KXug"},{"type":"output","id":"w6C9KRoNopqJa4RK7Yn4K","data":[],"key":"iZmelUw1DK"}],"key":"mlRsT1bwTc"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculating vegetation biophysical variables","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fwtwdbB8Y8"}],"identifier":"calculating-vegetation-biophysical-variables","label":"Calculating vegetation biophysical variables","html_id":"calculating-vegetation-biophysical-variables","implicit":true,"key":"sYFiXWFevw"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"uyRLw34kSw"}],"key":"mO0lBKsx3e"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"For now, we are assuming constant LAI for both Almonds and cover crops. This should ideally be estimated using multispectral and/or 3D point cloud data fitting an empirical model or inversting a radiative transfer model (RTM). You can see ./302-Biophysical_Traits_RTM.ipynb for an example on how to estimate biophysical traits using satellite imagery and RTMs, which could also be applied for UAV imagery.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"PHcD93n3D4"}],"key":"v4TAt3lR3h"}],"key":"I8AhZWpEi3"}],"key":"HpN34f58Y9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# for now constant values for LAI\n## tree crop\nF = 2.5\nlai_ar = Fc_ar * F\n\n## cover crop\nlai_cc_ar = np.ones_like(Tc_ar) * 0.6\n\n# get 'ecosystem' level biophysical variables (combine tree and cover crops) for TSEB\nlai_eco = lai_ar + lai_cc_ar \nFc_eco = Fc_ar + Fcc_ar\nFc_eco[Fc_eco>1] = 1\nF_eco = lai_eco/Fc_eco\n\n# cover crop height\nHc_cc_ar = np.ones_like(Tc_ar) * 0.4\n\n# green fraction\n## tree crop\nFg_ar = np.ones_like(Tc_ar) * 0.9 # less than 1 to take into account woody/non-green material\n## cover crop\nFg_cc_ar = np.ones_like(Tc_ar) * 1.\n\n# local LAI of cover crop\nF_sub = lai_cc_ar/Fcc_ar\n\n# row architecture and width\nrow_direction = 90\n\n## width of interrow\ninterrow = 8\n\n# canopy width to height ratio\nwc_ratio = 1\n## cover crop\nwc_sub_ratio = 1\n\n# leaf width\n## tree crop\nlw = 0.05\n## cover crop\nlw_cc = 0.01\nx_lad = 1\n\n# to take into account row strucure on vegetation clumping\npsi = row_direction - saa\n\n# calculate clumping index\n\n## tree crop\nOmega0 = TSEB.CI.calc_omega0_Kustas(lai_ar, Fc_ar, x_LAD=x_lad, isLAIeff=True)\nOmega = TSEB.CI.calc_omega_rows(lai_ar, Fc_ar, theta=sza,\n                                psi=psi, w_c=wc_ratio,\n                                x_lad=x_lad)\n# effective LAI (tree crop)\nlai_eff =  F * Omega\n\n## understory vegetation\nOmega0_un = TSEB.CI.calc_omega0_Kustas(lai_cc_ar, Fcc_ar, x_LAD=x_lad, isLAIeff=True)\nOmega_un = TSEB.CI.calc_omega_Kustas(Omega0_un, sza, w_C=wc_sub_ratio)\n\n# effective LAI (cover crop)\nlai_cc_eff =  F_sub * Omega_un\n\n# ecosystem lai \nOmega0_eco = TSEB.CI.calc_omega0_Kustas(lai_eco, Fc_eco, x_LAD=x_lad, isLAIeff=True)\nOmega_eco = TSEB.CI.calc_omega_Kustas(Omega0_eco, sza, w_C=wc_sub_ratio)\nlai_eco_eff = F_eco * Omega_eco\nprint('Done!')","key":"hH3uF3ZfP9"},{"type":"output","id":"BOg9tp9SPTw9QJdHW0ihc","data":[],"key":"QB5ddYpRN3"}],"key":"u6nvCJab97"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Ancillary information and parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KwDgsGmdMZ"}],"identifier":"ancillary-information-and-parameters","label":"Ancillary information and parameters","html_id":"ancillary-information-and-parameters","implicit":true,"key":"Cy7tDw0TYz"}],"key":"VGnUqrv5JB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#==============================================================================\n# Canopy and Soil spectra\n#==============================================================================\n\nspectraVeg = {'rho_leaf_vis': 0.05, 'tau_leaf_vis': 0.08, 'rho_leaf_nir': 0.26, 'tau_leaf_nir': 0.33}  # from pyTSEB\nspectraGrd = {'rsoilv': 0.07, 'rsoiln': 0.28}\n\n\n#Thermal spectra\ne_v_constant=0.99        #Leaf emissivity\ne_s_constant=0.95        #Soil emissivity\n\n# viewing angle of sensor\nvza = 0\n\n# for now keep constant for both layers\nz0_soil=0.01\n\n# TSEB parameters\nKN_c = 0.0038  # Kondo & Ishida (1997) coefficient for rough surfaces\nKN_b = 0.0120  # Kustas and Norman (1999) after Sauer and Norman (1995)\n\nalpha_pt = 1.26 # alpha parameter in Priestley-Taylor Initialization\n\n# using constant ratio appraoch to estimate G\nG_constant = 0.35\ncalcG = [[1], G_constant]\n\n# use Norman and Kustas 1995 resistance framework\nResistance_flag=[0,{}]\n","key":"JnkZ3yf9lB"},{"type":"output","id":"amvs5jebKOiEv6ZgLALXD","data":[],"key":"clorb5Y0ao"}],"key":"QWvwfb5Iuc"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Radiation partionning","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QBEZx5I1TQ"}],"identifier":"radiation-partionning","label":"Radiation partionning","html_id":"radiation-partionning","implicit":true,"key":"dEtaMRPfaB"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Net Radiation intercepted at the canopy and transmitted to the soil is estimated using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"T9jyG4y6nx"},{"type":"cite","url":"https://link.springer.com/book/10.1007/978-1-4612-1626-1","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Campbell & Norman (1998)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"boqoYO6V60"}],"kind":"narrative","label":"Campbell_1998","identifier":"https://link.springer.com/book/10.1007/978-1-4612-1626-1","enumerator":"3","key":"SkhZu8eSbY"},{"type":"text","value":" model (see Chapter 15).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zpRPkwDW1F"}],"key":"nYMuAa5RiX"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In the case of 3SEB, an adapted 3-source version is implemented taking into account the two vegetation layers in addition to a soil layer. See Burchard-Levine et al. 2022 for more details","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wRE902xdBy"}],"key":"v8apRxUwjO"},{"type":"heading","depth":4,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"2-Source Net Radiation Modeling","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"onSSYuMuwq"}],"identifier":"id-2-source-net-radiation-modeling","label":"2-Source Net Radiation Modeling","html_id":"id-2-source-net-radiation-modeling","implicit":true,"key":"vFXYJ4YfYm"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"eIMZQFCa1C"},{"type":"cite","url":"https://link.springer.com/book/10.1007/978-1-4612-1626-1","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Campbell & Norman (1998)","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"PO9mbiiVOy"}],"kind":"narrative","label":"Campbell_1998","identifier":"https://link.springer.com/book/10.1007/978-1-4612-1626-1","enumerator":"3","key":"bn7Yltxqo8"},{"type":"text","value":" model is used to simulate shortwave radiation partitioning between vegetation and soil","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"XLO4qb2vLU"}],"key":"m2fwa9JhAO"}],"key":"JUCif994Ww"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Emissivity\ne_s = np.ones(lst_ar.shape) * e_s_constant\ne_v = np.ones(lst_ar.shape) * e_v_constant\n\ndifvis, difnir, fvis, fnir = TSEB.rad.calc_difuse_ratio(Sdn_ar, sza, press=P_ar)\nskyl = fvis * difvis + fnir * difnir\nSdn_dir = (1. - skyl) * Sdn_ar\nSdn_dif = skyl * Sdn_ar\n\n# incoming long wave radiation\nemisAtm = rad.calc_emiss_atm(Ea_ar, Ta_ar)\nLsky = emisAtm * met.calc_stephan_boltzmann(Ta_ar)\n\nsn_veg, sn_soil = TSEB.rad.calc_Sn_Campbell(lai_eco, sza, Sdn_dir, Sdn_dif, fvis, fnir,\n                                                    np.full_like(lai_ar, spectraVeg['rho_leaf_vis']),\n                                                    np.full_like(lai_ar, spectraVeg['tau_leaf_vis']),\n                                                    np.full_like(lai_ar, spectraVeg['rho_leaf_nir']),\n                                                    np.full_like(lai_ar, spectraVeg['tau_leaf_nir']),\n                                                    np.full_like(lai_ar, spectraGrd['rsoilv']),\n                                                    np.full_like(lai_ar, spectraGrd['rsoiln']),\n                                                    x_LAD=x_lad, LAI_eff=lai_eco_eff) \n\nsn_veg[~np.isfinite(sn_veg)] = 0\nsn_soil[~np.isfinite(sn_soil)] = 0\n\nprint('Done!')","key":"b81dQdnTf0"},{"type":"output","id":"IUr9jj5uFPEZYNXgvlhHd","data":[],"key":"TZZAzpopI7"}],"key":"z9HHwMv4N3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3-Source Net Radiation Modeling","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bwlU6sq5OL"}],"identifier":"id-3-source-net-radiation-modeling","label":"3-Source Net Radiation Modeling","html_id":"id-3-source-net-radiation-modeling","implicit":true,"key":"JResDlL4tE"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Estimate shortwave radiation transmission using an adapted Campbell 1998 model (adapted for 3 layers). See the Supplementary Information of ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Ph1w0tU7Oo"},{"type":"cite","url":"https://doi.org/10.1111/gcb.16002","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Burchard-Levine et al. (2022)","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mOBTq2nKsY"}],"kind":"narrative","label":"Burchard_Levine_2021","identifier":"https://doi.org/10.1111/gcb.16002","enumerator":"2","key":"z7BVv3fIZn"},{"type":"text","value":" for more details.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mkgtqbmWIO"}],"key":"ThmPFoBVun"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"sn_ov = net shortwave radiation for overstory (tree crop)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DO43d8cqjq"}],"key":"lLu3Zjid0U"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"sn_un = net shortwave radiation for understory (cover crop)","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"C2HkzNP2TT"}],"key":"lguc8EfRWE"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"sn_soil =  net shortwave radiation for soil","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"njrpuiX8Wd"}],"key":"BikqcclebB"}],"key":"JuVTjTz22T"}],"key":"NTZ4YUsNNd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# estimate radiation transmission using Campbell 1998 model (adapted for 3 layers)\nsn_ov, sn_s, sn_un = py3seb.calc_Sn_Campbell(lai_ar,\n                                       lai_cc_ar,\n                                       sza,\n                                       Sdn_dir,\n                                       Sdn_dif,\n                                       fvis,\n                                       fnir,\n                                       np.full_like(lai_ar, spectraVeg['rho_leaf_vis']),\n                                       np.full_like(lai_ar, spectraVeg['rho_leaf_vis']),\n                                       np.full_like(lai_ar, spectraVeg['tau_leaf_vis']),\n                                       np.full_like(lai_ar, spectraVeg['tau_leaf_vis']),\n                                       np.full_like(lai_ar, spectraVeg['rho_leaf_nir']),\n                                       np.full_like(lai_ar, spectraVeg['rho_leaf_nir']),\n                                       np.full_like(lai_ar, spectraVeg['tau_leaf_nir']),\n                                       np.full_like(lai_ar, spectraVeg['tau_leaf_nir']),\n                                       np.full_like(lai_ar, spectraGrd['rsoilv']),\n                                       np.full_like(lai_ar, spectraGrd['rsoiln']),\n                                       Hc_ar,\n                                       0.25 * Hc_ar,\n                                       wc_sub_ratio,\n                                       Fc_ar,\n                                       LAI_eff=lai_eff,\n                                       LAI_eff_sub=lai_cc_eff)\n\nsn_ov[~np.isfinite(sn_ov)] = 0\nsn_s[~np.isfinite(sn_s)] = 0\nsn_un[~np.isfinite(sn_un)] = 0\n\nprint('Done!')","key":"hOCjiO5s6M"},{"type":"output","id":"pBJTkDyWizbC74clu_CUH","data":[],"key":"DCdd2pHwh6"}],"key":"YIAjB4bJ3c"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Landscape roughness estimation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J03HTngouu"}],"identifier":"landscape-roughness-estimation","label":"Landscape roughness estimation","html_id":"landscape-roughness-estimation","implicit":true,"key":"ZQbYkjCCS5"}],"key":"x8iKfbGsUk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# main vegetation layer (i.e. Almond orchard)\n#[z_0M, d_0] = TSEB.res.calc_roughness(lai_ar, Hc_ar, np.ones(lai_ar.shape) * wc_ratio,\n #                                     np.ones(lai_ar.shape) * TSEB.res.BROADLEAVED_D)\n# calculate tree crop roughness parameters taking into account LAIeff using Raupach 1994 model\nz_0M_factor, d_0_factor = py3seb.raupach_94(lai_eff)\nd_0 = Hc_ar*d_0_factor\nz_0M = Hc_ar*z_0M_factor\n\nd_0[d_0 < 0] = 0\nz_0M[z_0M < z0_soil] = z0_soil\n\n# understory/secondary vegetation (i.e. Cover crop)\nz_0m_un, d_0_un = TSEB.res.calc_roughness(lai_cc_eff,\n                                          Hc_cc_ar,\n                                           np.full_like(lai_cc_ar, wc_sub_ratio),\n                                          np.full_like(lai_cc_ar, TSEB.res.GRASS))\nd_0_un[d_0_un < 0] = 0\nz_0m_un[z_0m_un < z0_soil] = z0_soil\n\nprint('Done!')","key":"Sec0usx1tw"},{"type":"output","id":"AIahDJVaQyPPGUU_QDNm-","data":[],"key":"Wmz4y797f8"}],"key":"Lm3Kg1SzY9"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Running TSEB-PT, 3SEB-PT, 3SEB-2T, 3SEB-3T","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yq0U4nDu4M"}],"identifier":"running-tseb-pt-3seb-pt-3seb-2t-3seb-3t","label":"Running TSEB-PT, 3SEB-PT, 3SEB-2T, 3SEB-3T","html_id":"running-tseb-pt-3seb-pt-3seb-2t-3seb-3t","implicit":true,"key":"zpDxgdAhbS"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will run the different TSEB/3SEB variants in this section.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"drmsMQU43O"}],"key":"qLDOp3EA2J"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For each model run, we will save the modelled outputs in a dictionary to then be able to compare models and agaisnt tower measurements","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"z4YEneZ37q"}],"key":"aeDnQKG1fj"}],"key":"BNVnpLL53Z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"model_outdict = {}","key":"oPJW8HRY9d"},{"type":"output","id":"qM88Pt3p-7jMgWrlTjEB8","data":[],"key":"JDDZURna5r"}],"key":"xoQo9rwn5R"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"TSEB-PT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V3T084U3DS"}],"identifier":"tseb-pt","label":"TSEB-PT","html_id":"tseb-pt","implicit":true,"key":"zJYgh8Yt8j"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here we will the original TSEB with the priestley-taylor initialization for comparison purposes.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zwDOyixxPu"}],"key":"QF1q5hTOOd"}],"key":"WIWAu7i2wA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"[flag_PT_all, T_soil, T_veg, T_AC, Ln_soil, Ln_veg, LE_veg, H_veg,\n     LE_soil, H_soil, G_mod, R_S, R_X, R_A, u_friction, L, n_iterations] = TSEB.TSEB_PT(lst_ar,\n                                                                                        vza,\n                                                                                        Ta_ar,\n                                                                                        U_ar,\n                                                                                        Ea_ar,\n                                                                                        P_ar,\n                                                                                        sn_veg,\n                                                                                        sn_soil,\n                                                                                        Ldn,\n                                                                                        lai_eco,\n                                                                                        Hc_ar,\n                                                                                        e_v,\n                                                                                        e_s,\n                                                                                        z_0M,\n                                                                                        d_0,\n                                                                                        z_t,\n                                                                                        z_t,\n                                                                                        leaf_width=lw,\n                                                                                        alpha_PT=alpha_pt,\n                                                                                        f_c=Fc_eco,\n                                                                                        f_g=Fg_ar,\n                                                                                        calcG_params=calcG,\n                                                                                        resistance_form=Resistance_flag)\n\n# save ouputs in outdict \nLE = LE_veg + LE_soil\nH = H_veg + H_soil\nRn = (Ln_veg + sn_veg) + (Ln_soil + sn_soil)\n\n# save outputs to dictionary\nmodel_outdict['LE_TSEB-PT'] = LE\nmodel_outdict['LEc_TSEB-PT'] = LE_veg\nmodel_outdict['H_TSEB-PT'] = H\nmodel_outdict['Rn_TSEB-PT'] = Rn\nmodel_outdict['G_TSEB-PT'] = G_mod\nmodel_outdict['Tc_TSEB-PT'] = T_veg\nmodel_outdict['Ts_TSEB-PT'] = T_soil\nmodel_outdict['Flags_TSEB-PT'] = flag_PT_all\n\n# visualizing outputs \nfig, axes = plt.subplots(2,2, figsize=(10,8))\nax = axes[0,0]\nim = ax.imshow(LE, vmin=0, vmax=600, cmap='PuBu', extent = te)\nax.set_title('LE')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('LE (W/$m^2$)')  # Add title to colorbar\nle_mean = int(np.round(np.nanmean(LE),0))\nax.text(0.01,0.1, f'mean:\\n{le_mean} W/$m^2$', transform=ax.transAxes)\nax = axes[0,1]\nim = ax.imshow(H, vmin=0, vmax=600, cmap='OrRd',  extent = te)\nax.set_title('H')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('H (W/$m^2$)')  # Add title to colorbar\nh_mean = int(np.round(np.nanmean(H),0))\nax.text(0.01,0.1, f'mean:\\n{h_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,0]\nim = ax.imshow(Rn, vmin=0, vmax=800, cmap='plasma',  extent = te)\nax.set_title('Rn')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('Rn (W/$m^2$)')  # Add title to colorbar\nrn_mean = int(np.round(np.nanmean(Rn),0))\nax.text(0.01,0.1, f'mean:\\n{rn_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,1]\nim = ax.imshow(G_mod, vmin=0, vmax=200, cmap='copper',  extent = te)\nax.set_title('G')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('G (W/$m^2$)')  # Add title to colorbar\ng_mean = int(np.round(np.nanmean(G_mod),0))\nax.text(0.01,0.1, f'mean:\\n{g_mean} W/$m^2$', transform=ax.transAxes)\n\nplt.show()\n","key":"HuHx9hA6ul"},{"type":"output","id":"bBz2GWQ3suB9GUXuYjej_","data":[],"key":"pPCzRqbzF8"}],"key":"Jn6tMdJeYf"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3SEB-PT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"By9ikti6OU"}],"identifier":"id-3seb-pt","label":"3SEB-PT","html_id":"id-3seb-pt","implicit":true,"key":"N6JCLdDG9T"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here we will run 3SEB-PT, which initializes both vegetation canopies with Priestley-Taylor assumption","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"NFt2mcEjY2"}],"key":"hQjaJuBTpp"}],"key":"fHgkCLqyoX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"[flag_PT_all, T_S, T_C, T_C_sub, T_AC, L_n_sub, L_nC, Ln_C_sub, Ln_S, LE_C, H_C, LE_C_sub, H_C_sub,\n LE_S, H_S, G_mod, R_S, R_sub, R_X, R_A, u_friction, L, n_iterations] = py3seb.ThreeSEB_PT(lst_ar,\n                                                                                         vza,\n                                                                                         Ta_ar,\n                                                                                         U_ar,\n                                                                                         Ea_ar,\n                                                                                         P_ar,\n                                                                                         sn_ov,\n                                                                                         sn_s,\n                                                                                         sn_un,\n                                                                                         Ldn_ar,\n                                                                                         lai_ar,\n                                                                                         lai_cc_ar,\n                                                                                         Hc_ar,\n                                                                                         Hc_cc_ar,\n                                                                                         e_v,\n                                                                                         e_v,#change e_v cover crop\n                                                                                         e_s,\n                                                                                         z_0M,\n                                                                                         z_0m_un,\n                                                                                         d_0,\n                                                                                         d_0_un,\n                                                                                         z_u,\n                                                                                         z_t,\n                                                                                         leaf_width=lw,\n                                                                                         leaf_width_sub=lw_cc,\n                                                                                         f_c=Fc_ar,\n                                                                                         f_c_sub=Fcc_ar,\n                                                                                         f_g=Fg_ar,\n                                                                                         f_g_sub=Fg_cc_ar,\n                                                                                         calcG_params=calcG,\n                                                                                         resistance_form=Resistance_flag)\n# save ouputs in outdict \nLE = LE_C + LE_C_sub + LE_S\nH = H_C + H_S + H_C_sub\n\nRn_C = L_nC + sn_ov\nRn_C_sub = Ln_C_sub + sn_un\nRn_S = Ln_S + sn_s\nRn = Rn_C + Rn_C_sub + Rn_S\n\n# save outputs to dictionary\nmodel_outdict['LE_3SEB-PT'] = LE\nmodel_outdict['LEc_3SEB-PT'] = LE_C\nmodel_outdict['LEcc_3SEB-PT'] = LE_C_sub\nmodel_outdict['H_3SEB-PT'] = H\nmodel_outdict['Rn_3SEB-PT'] = Rn\nmodel_outdict['G_3SEB-PT'] = G_mod\nmodel_outdict['Tc_3SEB-PT'] = T_C\nmodel_outdict['Tcc_3SEB-PT'] = T_C_sub\nmodel_outdict['Ts_3SEB-PT'] = T_S\nmodel_outdict['Flags_3SEB-PT'] = flag_PT_all\n\n# visualizing outputs \n\nfig, axes = plt.subplots(2,2, figsize=(10,8))\nax = axes[0,0]\nim = ax.imshow(LE, vmin=0, vmax=600, cmap='PuBu', extent = te)\nax.set_title('LE')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('LE (W/$m^2$)')  # Add title to colorbar\nle_mean = int(np.round(np.nanmean(LE),0))\nax.text(0.01,0.1, f'mean:\\n{le_mean} W/$m^2$', transform=ax.transAxes)\nax = axes[0,1]\nim = ax.imshow(H, vmin=0, vmax=600, cmap='OrRd',  extent = te)\nax.set_title('H')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('H (W/$m^2$)')  # Add title to colorbar\nh_mean = int(np.round(np.nanmean(H),0))\nax.text(0.01,0.1, f'mean:\\n{h_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,0]\nim = ax.imshow(Rn, vmin=0, vmax=800, cmap='plasma',  extent = te)\nax.set_title('Rn')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('Rn (W/$m^2$)')  # Add title to colorbar\nrn_mean = int(np.round(np.nanmean(Rn),0))\nax.text(0.01,0.1, f'mean:\\n{rn_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,1]\nim = ax.imshow(G_mod, vmin=0, vmax=200, cmap='copper',  extent = te)\nax.set_title('G')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('G (W/$m^2$)')  # Add title to colorbar\ng_mean = int(np.round(np.nanmean(G_mod),0))\nax.text(0.01,0.1, f'mean:\\n{g_mean} W/$m^2$', transform=ax.transAxes)\n\n\nplt.show()","key":"Er7OFAB6An"},{"type":"output","id":"tF3oy8I0z0SL5pfWpzEuU","data":[],"key":"fQtR1Dh96P"}],"key":"YD3N9Uh04n"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3SEB-2T","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rmrUBwgDgm"}],"identifier":"id-3seb-2t","label":"3SEB-2T","html_id":"id-3seb-2t","implicit":true,"key":"yPbiFfg8dR"}],"key":"nldHdJc4kp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#T_sub = ((Fcc_ar*(Tcc_ar)**4)+((1-Fcc_ar)*(Ts_ar)**4))**0.25\n\n[flag_PT_all, T_S, T_C_sub, T_AC, Ln_sub, Ln_C, Ln_C_sub, Ln_S, LE_C, H_C, LE_C_sub, H_C_sub,\nLE_S, H_S, G_mod, R_sub, R_X_un, R_X_ov, R_A, u_friction, L, n_iterations] = py3seb.ThreeSEB_2T(Tc_ar,\n                                                                             Tsub_ar,\n                                                                             vza,\n                                                                             Ta_ar,\n                                                                             U_ar,\n                                                                             Ea_ar,\n                                                                             P_ar,\n                                                                             sn_ov,\n                                                                             sn_s,\n                                                                             sn_un,\n                                                                             Ldn_ar,\n                                                                             lai_ar,\n                                                                             lai_cc_ar,\n                                                                             Hc_ar,\n                                                                             Hc_cc_ar,\n                                                                             e_v,\n                                                                             e_v,#change e_v cover crop\n                                                                             e_s,\n                                                                             z_0M,\n                                                                             z_0m_un,\n                                                                             d_0,\n                                                                             d_0_un,\n                                                                             z_u,\n                                                                             z_t,\n                                                                             leaf_width=lw,\n                                                                             leaf_width_sub=lw_cc,\n                                                                             f_c=Fc_ar,\n                                                                             f_c_sub=Fcc_ar,\n                                                                             f_g=Fg_ar,\n                                                                             f_g_sub=Fg_cc_ar,\n                                                                             calcG_params=calcG,\n                                                                             resistance_form=Resistance_flag)\n\n# save ouputs in outdict \nLE = LE_C + LE_C_sub + LE_S\nH = H_C + H_S + H_C_sub\n\nRn_C = Ln_C + sn_ov\nRn_C_sub = Ln_C_sub + sn_un\nRn_S = Ln_S + sn_s\nRn = Rn_C + Rn_C_sub + Rn_S\nRn[Rn>1000] = np.nan\n\n# visualizing outputs \n# save outputs to dictionary\nmodel_outdict['LE_3SEB-2T'] = LE\nmodel_outdict['LEc_3SEB-2T'] = LE_C\nmodel_outdict['LEcc_3SEB-2T'] = LE_C_sub\nmodel_outdict['H_3SEB-2T'] = H\nmodel_outdict['Rn_3SEB-2T'] = Rn\nmodel_outdict['G_3SEB-2T'] = G_mod\nmodel_outdict['Tc_3SEB-2T'] = Tc_ar\nmodel_outdict['Tcc_3SEB-2T'] = T_C_sub\nmodel_outdict['Ts_3SEB-2T'] = T_S\nmodel_outdict['Flags_3SEB-2T'] = flag_PT_all\n\n# visualize outputs\nfig, axes = plt.subplots(2,2, figsize=(10,8))\nax = axes[0,0]\nim = ax.imshow(LE, vmin=0, vmax=600, cmap='PuBu', extent = te)\nax.set_title('LE')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('LE (W/$m^2$)')  # Add title to colorbar\nle_mean = int(np.round(np.nanmean(LE),0))\nax.text(0.01,0.1, f'mean:\\n{le_mean} W/$m^2$', transform=ax.transAxes)\nax = axes[0,1]\nim = ax.imshow(H, vmin=0, vmax=600, cmap='OrRd',  extent = te)\nax.set_title('H')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('H (W/$m^2$)')  # Add title to colorbar\nh_mean = int(np.round(np.nanmean(H),0))\nax.text(0.01,0.1, f'mean:\\n{h_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,0]\nim = ax.imshow(Rn, vmin=0, vmax=800, cmap='plasma',  extent = te)\nax.set_title('Rn')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('Rn (W/$m^2$)')  # Add title to colorbar\nrn_mean = int(np.round(np.nanmean(Rn),0))\nax.text(0.01,0.1, f'mean:\\n{rn_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,1]\nim = ax.imshow(G_mod, vmin=0, vmax=200, cmap='copper',  extent = te)\nax.set_title('G')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('G (W/$m^2$)')  # Add title to colorbar\ng_mean = int(np.round(np.nanmean(G_mod),0))\nax.text(0.01,0.1, f'mean:\\n{g_mean} W/$m^2$', transform=ax.transAxes)\n\n\nplt.show()","key":"Z3ZEmH9NV0"},{"type":"output","id":"qqfrQpuo6wHf4W2J074lR","data":[],"key":"vuct7wIznc"}],"key":"Z44pMagHSj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Running 3SEB-3T","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WXzRPMPnSK"}],"identifier":"running-3seb-3t","label":"Running 3SEB-3T","html_id":"running-3seb-3t","implicit":true,"key":"eMLd0fwj9R"}],"key":"qz3akrKNPB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"[flag_PT_all, T_AC, L_nC, Ln_C_sub, Ln_S, LE_C, H_C, LE_C_sub, H_C_sub,\nLE_S, H_S, G_mod, R_S, R_x_un,R_x_ov, R_A, u_friction, L, n_iterations] = py3seb.ThreeSEB_3T(Tc_ar,\n                                                                                     Tcc_ar,\n                                                                                     Ts_ar,\n                                                                                     Ta_ar,\n                                                                                     U_ar,\n                                                                                     Ea_ar,\n                                                                                     P_ar,\n                                                                                     sn_ov,\n                                                                                     sn_s,\n                                                                                     sn_un,\n                                                                                     Ldn_ar,\n                                                                                     lai_ar,\n                                                                                     lai_cc_ar,\n                                                                                     Hc_ar,\n                                                                                     Hc_cc_ar,\n                                                                                     e_v,\n                                                                                     e_v,#change e_v cover crop\n                                                                                     e_s,\n                                                                                     z_0M,\n                                                                                     z_0m_un,\n                                                                                     d_0,\n                                                                                     d_0_un,\n                                                                                     z_u,\n                                                                                     z_t,\n                                                                                     leaf_width=lw,\n                                                                                     leaf_width_sub=lw_cc,\n                                                                                     f_c=Fc_ar,\n                                                                                     f_c_sub=Fcc_ar,\n                                                                                     f_g=Fg_ar,\n                                                                                     f_g_sub=Fg_cc_ar,\n                                                                                     calcG_params=calcG,\n                                                                                     resistance_form=Resistance_flag)\n\n# save ouputs in outdict \nLE = LE_C + LE_C_sub + LE_S\nH = H_C + H_S + H_C_sub\n\nRn_C = L_nC + sn_ov\nRn_C_sub = Ln_C_sub + sn_un\nRn_S = Ln_S + sn_s\nRn = Rn_C + Rn_C_sub + Rn_S\nRn[Rn>1000] = np.nan\nG_mod[G_mod>200] = np.nan\n# visualizing outputs \n# save outputs to dictionary\nmodel_outdict['LE_3SEB-3T'] = LE\nmodel_outdict['LEc_3SEB-3T'] = LE_C\nmodel_outdict['LEcc_3SEB-3T'] = LE_C_sub\nmodel_outdict['H_3SEB-3T'] = H\nmodel_outdict['Rn_3SEB-3T'] = Rn\nmodel_outdict['G_3SEB-3T'] = G_mod\nmodel_outdict['Tc_3SEB-3T'] = Tc_ar\nmodel_outdict['Tcc_3SEB-3T'] = Tcc_ar\nmodel_outdict['Ts_3SEB-3T'] = Ts_ar\nmodel_outdict['Flags_3SEB-3T'] = flag_PT_all\n\n# visualizing outputs \n\nfig, axes = plt.subplots(2,2, figsize=(10,8))\nax = axes[0,0]\nim = ax.imshow(LE, vmin=0, vmax=600, cmap='PuBu', extent = te)\nax.set_title('LE')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('LE (W/$m^2$)')  # Add title to colorbar\nle_mean = int(np.round(np.nanmean(LE),0))\nax.text(0.01,0.1, f'mean:\\n{le_mean} W/$m^2$', transform=ax.transAxes)\nax = axes[0,1]\nim = ax.imshow(H, vmin=0, vmax=600, cmap='OrRd',  extent = te)\nax.set_title('H')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('H (W/$m^2$)')  # Add title to colorbar\nh_mean = int(np.round(np.nanmean(H),0))\nax.text(0.01,0.1, f'mean:\\n{h_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,0]\nim = ax.imshow(Rn, vmin=0, vmax=800, cmap='plasma',  extent = te)\nax.set_title('Rn')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('Rn (W/$m^2$)')  # Add title to colorbar\nrn_mean = int(np.round(np.nanmean(Rn),0))\nax.text(0.01,0.1, f'mean:\\n{rn_mean} W/$m^2$', transform=ax.transAxes)\n\nax = axes[1,1]\nim = ax.imshow(G_mod, vmin=0, vmax=200, cmap='copper',  extent = te)\nax.set_title('G')\n# Add colorbar for only axes[0, 0]\ncbar = fig.colorbar(im, ax=ax)\ncbar.set_label('G (W/$m^2$)')  # Add title to colorbar\ng_mean = int(np.round(np.nanmean(G_mod),0))\nax.text(0.01,0.1, f'mean:\\n{g_mean} W/$m^2$', transform=ax.transAxes)\n\n\nplt.show()","key":"VfPHlQeoGp"},{"type":"output","id":"5JLB9n77gCl4HewndZ6iT","data":[],"key":"vP33jUcqWF"}],"key":"ne3olI3Ajl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Model comparisons and evaluation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bsAshssp48"}],"identifier":"model-comparisons-and-evaluation","label":"Model comparisons and evaluation","html_id":"model-comparisons-and-evaluation","implicit":true,"key":"VeeQhJ0dZH"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this section we will compare the different model outputs. First, we will evaluated the model outputs against the EC tower measurements.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"RzNH9vPgD9"}],"key":"mvEga7vn4z"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"To make them as comparable as possible, we will estimate the 2D flux tower footprint to better characterize the pixels associated to the tower measurements.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ujnPb0zERc"}],"key":"enIAOIU9X7"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"The 2D EC tower flux footprint was estimated using the Flux Footprint Prediction (FFP) model as described in ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"FVkmxCNW97"},{"type":"cite","url":"https://doi.org/10.5194/gmd-8-3695-2015","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Kljun et al. (2015)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"yAguEJEwOf"}],"kind":"narrative","label":"Kljun_2015","identifier":"https://doi.org/10.5194/gmd-8-3695-2015","enumerator":"4","key":"xHynHYpmOP"},{"type":"text","value":" and the code is available ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Lh8SETPjpW"},{"type":"link","url":"https://footprint.kljun.net/","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Mj19KeTn9d"}],"urlSource":"https://footprint.kljun.net/","key":"zqojrY3n3r"}],"key":"FwsNVupfGp"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"This footprint estimates the weighted 2D area contributing to the EC sampling. As such, we can best compare the model results to the tower measurements by acquiring all pixels located within the estimated footprint and obtaining a weighted average for those pixels. The footprint was therefore rasterized and aligned to the arrays of the model output geometry to ease the comparison.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JJq2wTeV9X"}],"key":"jjKO9wgy8n"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"See below for a visualization.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"RsKHpEeYEF"}],"key":"jmSx1z6ETY"},{"type":"heading","depth":3,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Visualization of footprint area","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Mu8XUL98up"}],"identifier":"visualization-of-footprint-area","label":"Visualization of footprint area","html_id":"visualization-of-footprint-area","implicit":true,"key":"h5OiA9mERu"}],"key":"gMloUZS99P"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fp_dir = datadir / 'Footprints'\nfp_file = fp_dir / f'surface_CC_202404161100_FPnorm_10cm.tif'\nfp_fid = gdal.Open(str(fp_file))\nfp_ar = fp_fid.GetRasterBand(1).ReadAsArray()\nfp_ar[fp_ar < 0.0001] = np.nan\n\nulx, xres, xskew, uly, yskew, yres = fp_fid.GetGeoTransform()\nlrx = ulx + (fp_fid.RasterXSize * xres)\nlry = uly + (fp_fid.RasterYSize * yres)\n\nte_10cm = [ulx, lrx, lry, uly]\n\n# get 8m aligned footprint\nfp_8m_file = fp_dir / f'surface_CC_202404161100_FPnorm_8m_aligned.tif'\nfp_8m_fid = gdal.Open(str(fp_8m_file))\nfp_8m_ar = fp_8m_fid.GetRasterBand(1).ReadAsArray()\nfp_8m_ar[fp_8m_ar < 0.0001] = np.nan\n\nfp_shp = fp_dir/'shp'/'surface_CC_202404161100_FPnorm.shp'\nfp_gpd = gpd.read_file(fp_shp)\n\nfig, axes = plt.subplots(2,2, figsize=(10,8))\nax1 = axes[0,0]\nax1.imshow(rgb_image, extent=te)\nax1.imshow(fp_ar, cmap='viridis', extent=te_10cm, alpha=0.7)\nfp_gpd.plot(ax=ax1, facecolor='none', edgecolor='indianred', linewidth=1, alpha=0.75, label='footprint')\nax1.set_ylim(4156650, 4157050)\nax1.set_xlim(655150,655430)\n\nax2 = axes[0,1]\n\nax2.imshow(rgb_image, extent=te)\nim1 = ax2.imshow(fp_ar, cmap='viridis', extent=te_10cm, alpha=0.7)\nax2.set_ylim(4156650,4156760)\nax2.set_xlim(655300,655430)\nfp_gpd.plot(ax=ax2, facecolor='none', edgecolor='indianred', linewidth=1, alpha=0.75, label='footprint')\nplt.colorbar(im1, ax=ax2, label='weighted flux contribution (-)',  shrink=0.65)\n\nax3 = axes[1,0]\nax3.imshow(model_outdict['LE_3SEB-PT'],vmin=0, vmax=600, cmap='PuBu', extent=te)\nax3.imshow(fp_8m_ar, cmap='viridis', extent=te, alpha=0.7)\nax3.set_ylim(4156650, 4157050)\nax3.set_xlim(655150,655430)\nfp_gpd.plot(ax=ax3, facecolor='none', edgecolor='indianred', linewidth=1, alpha=0.75, label='footprint')\n\nax4 = axes[1,1]\nax4.imshow(model_outdict['LE_3SEB-PT'],vmin=0, vmax=600, cmap='PuBu', extent=te)\nim2 = ax4.imshow(fp_8m_ar, cmap='viridis', extent=te, alpha=0.7)\nax4.set_ylim(4156650,4156760)\nax4.set_xlim(655300,655430)\nfp_gpd.plot(ax=ax4, facecolor='none', edgecolor='indianred', linewidth=1, alpha=0.75, label='footprint')\nplt.colorbar(im2, ax=ax4, label='weighted flux contribution (-)', shrink=0.65)\nplt.show()","key":"Ia0mKXASRH"},{"type":"output","id":"IABfBy9UiYJ4jvXHQDTMT","data":[],"key":"osHyJiu4Jp"}],"key":"CHUztQw3ty"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compare model results to measurements","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qwSbH0i2L5"}],"identifier":"compare-model-results-to-measurements","label":"Compare model results to measurements","html_id":"compare-model-results-to-measurements","implicit":true,"key":"jwsQGi2D5i"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Get weighted model results over footprint","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aoTPy7JaGD"}],"identifier":"get-weighted-model-results-over-footprint","label":"Get weighted model results over footprint","html_id":"get-weighted-model-results-over-footprint","implicit":true,"key":"zJaAruGsSm"}],"key":"Rt8OKHrRRh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# observed data are saved in outdict\n\nmodel_types = ['TSEB-PT', '3SEB-PT', '3SEB-2T','3SEB-3T']\nfluxes = ['LE', 'H', 'Rn', 'G']\n\nfor model in model_types:\n    for var in fluxes:\n        var_ar = model_outdict[f'{var}_{model}']\n        flags =  model_outdict[f'Flags_{model}']\n        var_ar[var_ar<-100] = np.nan\n        var_ar[var_ar>1000] = np.nan\n        var_ar[flags > 5] = np.nan\n        fp_8m_ar[fp_8m_ar==0] = np.nan\n        # get weighted average\n        avg_w = np.nansum(var_ar * fp_8m_ar)/np.nansum(fp_8m_ar)\n        \n        outdict[f'{var}_{model}'] = []\n        outdict[f'{var}_{model}'].append(avg_w)\n\nresults_df = pd.DataFrame(outdict)\nresults_df","key":"SGnlecEXXM"},{"type":"output","id":"vDhaCTkKlKLKH18zyW0zM","data":[],"key":"HsccDsiKtg"}],"key":"lbt8gKusu6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# plot resutls \n\nimport scipy.stats as st\n    \nmodel_types = ['TSEB-PT', '3SEB-PT', '3SEB-2T', '3SEB-3T']\n\nh_obs = results_df['H_obs'].values\nRn_obs = results_df['Rn_obs'].values\nG_obs = results_df['G_obs'].values\nle_obs = results_df['LE_obs'].values\nec_res = Rn_obs - h_obs - le_obs - G_obs\n\nle_res = Rn_obs - h_obs - G_obs\nbowen_ratio = h_obs/le_obs\nle_bowen = (Rn_obs - G_obs)/(1+bowen_ratio)\nle_ens = (le_obs + le_bowen + le_res)/3\nh_ens = Rn_obs - G_obs - le_ens\n\nfig, axes = plt.subplots(2,2, figsize=(14,12))\ni = 0\nfor model_type in model_types:\n    #H\n    h_mod = results_df[f'H_{model_type}'].values\n    # Rn\n    Rn_mod = results_df[f'Rn_{model_type}'].values\n    # G\n    G_mod = results_df[f'G_{model_type}'].values\n    # LE\n    le_mod = results_df[f'LE_{model_type}'].values\n\n    if i == 0:\n        ax = axes[0,0]\n    elif i == 1:\n        ax = axes[0,1]\n    elif i == 2:\n        ax = axes[1,0]\n    else:\n        ax = axes[1,1]\n\n\n    #plt.scatter(le_mod[mask], le_obs[mask], color='dodgerblue', marker='o', label='LE (unclosed)', s=50)\n    ax.scatter(le_mod, le_ens, color='dodgerblue', marker='s', label='LE', s=30)\n    ax.scatter(h_mod, h_ens, color='indianred', marker='o', label='H', s=50)\n    ax.scatter(Rn_mod, Rn_obs, color='orange', marker='d', label='Rn', s=50)\n    ax.scatter(G_mod[G_obs > 0], G_obs[G_obs > 0], color='k', marker='^', label='G', s=50)\n    ax.plot((0, 800), (0, 800), color='k', label='1:1 line', linestyle = '--')\n    \n\n    ax.legend()\n    ax.set_xlim(0, 800)\n    ax.set_ylim(0, 800)\n    ax.set_xlabel(f'{model_type} modeled (W/$m^2$)', fontsize=14)\n    if i == 0 or i == 2:\n        ax.set_ylabel('EC Observed (W/$m^2$)', fontsize=14)\n    #ax.set_title(f'{model_type}', fontsize=16)\n    i = i + 1\nplt.show()","key":"H1jNBbPEj0"},{"type":"output","id":"ra-ycDkf9SIPCxgcJbfi0","data":[],"key":"yqXgSiDbfA"}],"key":"fr9BmTl4Rm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Comparison of modeled estimated component temperatures vs UAV contextual approach","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"G7nOgQIv9h"}],"identifier":"comparison-of-modeled-estimated-component-temperatures-vs-uav-contextual-approach","label":"Comparison of modeled estimated component temperatures vs UAV contextual approach","html_id":"comparison-of-modeled-estimated-component-temperatures-vs-uav-contextual-approach","implicit":true,"key":"Cx1McGBLxe"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let us compare the component temperatures (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LakyjAm7Yy"},{"type":"inlineMath","value":"T_c","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"fo2fub4gsa"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"l19B7IipKW"},{"type":"inlineMath","value":"T_{cc}","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>c</mi><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{cc}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">cc</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"rhIypWxJbC"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lq1XRnNwvy"},{"type":"inlineMath","value":"T_s","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"RcaDgiDIVC"},{"type":"text","value":") retrieved from contextual methods to those estimated from TSEB-PT, 3SEB-PT and 3SEB-2T","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CtuUO5nwWe"}],"key":"lnAoYSiOED"}],"key":"XWbtDj07AE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def model_metrics(X, Y, mask):\n    rmse = np.sqrt(np.nanmean((X[mask] - Y[mask]) ** 2))\n    cor = st.pearsonr(X[np.logical_and.reduce((mask,~np.isnan(X),~np.isnan(Y)))], Y[np.logical_and.reduce((mask,~np.isnan(Y),~np.isnan(X)))])[0]\n    bias = np.nanmean(X[mask] - Y[mask])\n    return rmse, cor, bias\n\n\n# make 2 x 2 plot with different comparison\n# get T_canopy\nfig, axes = plt.subplots(2,2, figsize=(14,12))\n\n# measured IRT\nIRT_canopy = meteo_ds['T_CANOPY'].values[date_mask][0] + 273.15\n\n# TSEB-PT estimated \nTc_tseb = model_outdict['Tc_TSEB-PT']\nTs_tseb = model_outdict['Ts_TSEB-PT']\n\n# 3SEB-PT estimated \nTc_3seb_pt = model_outdict['Tc_3SEB-PT']\nTcc_3seb_pt = model_outdict['Tcc_3SEB-PT']\nTs_3seb_pt = model_outdict['Ts_3SEB-PT']\n\n# 3SEB-2T estimated \nTcc_3seb_2t = model_outdict['Tcc_3SEB-2T']\nTs_3seb_2t = model_outdict['Ts_3SEB-2T']\n\n# error metrics for TSEB-PT\nTc_rmse, Tc_cor,_ = model_metrics(Tc_tseb,Tc_ar, np.logical_and(Tc_tseb>270, Tc_tseb<320))\nTs_rmse, Ts_cor,_ = model_metrics(Ts_tseb,Ts_ar, np.logical_and(Ts_tseb>270, Ts_tseb<320))\n\n# TSEB-PT\nax = axes[0,0]\nax.scatter(Tc_tseb, Tc_ar, color='darkgreen', marker='o', label=f'$T_C$, r = {Tc_cor:.2f}, RMSE = {Tc_rmse:.1f}', s=50)\nax.scatter(Ts_tseb, Ts_ar, color='saddlebrown', marker='o', label=f'$T_S$, r = {Ts_cor:.2f}, RMSE = {Ts_rmse:.1f}', s=50)\nax.plot((0, 800), (0, 800), color='k', label='1:1 line', linestyle = '--')\nax.set_xlim(290,320)\nax.set_ylim(290,320)\nax.set_ylabel('Contextual UAV (K)', fontsize=16)\nax.set_xlabel('Modelled TSEB-PT (K)', fontsize=16)\nax.legend(fontsize=12)\n\n# error metrics for 3SEB-PT\nTc_rmse, Tc_cor,_ = model_metrics(Tc_3seb_pt,Tc_ar, np.logical_and(Tc_3seb_pt>270, Tc_3seb_pt<320))\nTcc_rmse, Tcc_cor,_ = model_metrics(Tcc_3seb_pt,Tcc_ar, np.logical_and(Tcc_3seb_pt>270, Tcc_3seb_pt<320))\nTs_rmse, Ts_cor,_ = model_metrics(Ts_3seb_pt,Ts_ar, np.logical_and(Ts_3seb_pt>270, Ts_3seb_pt<320))\n\n# 3SEB-PT\nax = axes[0,1]\nax.scatter(Tc_3seb_pt, Tc_ar, color='darkgreen', marker='o', label=f'$T_C$, r = {Tc_cor:.2f}, RMSE = {Tc_rmse:.1f}', s=50)\nax.scatter(Tcc_3seb_pt, Tcc_ar, color='yellowgreen', marker='o', label='$T_{C,sub}$'+ f', r = {Tcc_cor:.2f}, RMSE = {Tcc_rmse:.1f}', s=50)\nax.scatter(Ts_3seb_pt, Ts_ar, color='saddlebrown', marker='o', label=f'$T_S$, r = {Ts_cor:.2f}, RMSE = {Ts_rmse:.1f}', s=50)\nax.plot((0, 800), (0, 800), color='k', label='1:1 line', linestyle = '--')\n\nax.set_xlim(290,320)\nax.set_ylim(290,320)\nax.set_ylabel('Contextual UAV (K)', fontsize=16)\nax.set_xlabel('Modelled 3SEB-PT (K)', fontsize=16)\nax.legend(fontsize=12)\n\n# 3SEB-2T\nax = axes[1,0]\n# error metrics for 3SEB-2T\nTcc_rmse, Tcc_cor,_ = model_metrics(Tcc_3seb_2t,Tcc_ar, np.logical_and(Tcc_3seb_2t>270, Tcc_3seb_2t<320))\nTs_rmse, Ts_cor,_ = model_metrics(Ts_3seb_2t,Ts_ar, np.logical_and(Ts_3seb_2t>270, Ts_3seb_2t<320))\n\nax.scatter(Tcc_3seb_2t, Tcc_ar, color='yellowgreen', marker='o', label='$T_{C,sub}$'+ f', r = {Tcc_cor:.2f}, RMSE = {Tcc_rmse:.1f}', s=50)\nax.scatter(Ts_3seb_2t, Ts_ar, color='saddlebrown', marker='o', label=f'$T_S$, r = {Ts_cor:.2f}, RMSE = {Ts_rmse:.1f}', s=50)\nax.plot((270, 400), (270, 400), color='k', label='1:1 line', linestyle = '--')\n\nax.set_xlim(290,320)\nax.set_ylim(290,320)\nax.set_ylabel('Contextual UAV (K)', fontsize=16)\nax.set_xlabel('Modelled 3SEB-2T (K)', fontsize=16)\nax.legend(fontsize=12)\n\n\n# get averages over footprint\nTc_tseb_fp = np.nansum(Tc_tseb * fp_8m_ar)/np.nansum(fp_8m_ar)\nTc_3seb_fp = np.nansum(Tc_3seb_pt * fp_8m_ar)/np.nansum(fp_8m_ar)\nTc_ar_fp = np.nansum(Tc_ar * fp_8m_ar)/np.nansum(fp_8m_ar)\n\nax = axes[1,1]\nax.scatter(Tc_tseb_fp, IRT_canopy, color='orange', marker='d', label=f'TSEB-PT', s=50)\nax.scatter(Tc_3seb_fp, IRT_canopy, color='indianred', marker='o', label=f'3SEB-PT', s=50)\nax.scatter(Tc_ar_fp, IRT_canopy, color='dodgerblue', marker='^', label=f'Contextual UAV', s=50)\nax.set_ylabel('Measured $T_c$ IRT (K)', fontsize=16)\nax.set_xlabel('Estimated $T_c$ (K)', fontsize=16)\n\nax.set_xlim(290,310)\nax.set_ylim(290,310)\n\nax.plot((0, 800), (0, 800), color='k', label='1:1 line', linestyle = '--')\nax.legend(fontsize=12)\n\nplt.show()","key":"QWCMeBzcR0"},{"type":"output","id":"ljUV2yiFaCUNwrXQF0rFj","data":[],"key":"zPT4EmkGei"}],"key":"HPlD3G8Le0"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"Qy9YuTUjAV"}],"key":"iyZzjujDPr"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"There is some evidence that the contextual retrievals of temperature are overestimated according to the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"GgMk7dWN04"},{"type":"inlineMath","value":"T_C","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"zMwNvphBf8"},{"type":"text","value":" comparison with IRT measurements but also from the overestimation of H by 3SEB-3T. How do you think we could improve this or further evaluate this?","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"kVjOYwr5Xf"}],"key":"mRKfqgKbgE"}],"key":"ZzXVonpUJx"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Next steps:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"zCMN8p1bFb"}],"key":"xUYkrDCkKI"},{"type":"text","value":" How does the partitioning of LE/ET change with each model variant? Compare the ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"mEqlgZtq08"},{"type":"inlineMath","value":"LE_C","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">LE_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"OL1EC7ts99"},{"type":"text","value":", ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pVADidXTto"},{"type":"inlineMath","value":"LE_{C,sub}","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mrow><mi>C</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">LE_{C,sub}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>","key":"IBzNmUNbbT"},{"type":"text","value":" and T/ET between model outputs.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"XNK32O7mQY"}],"key":"SL5rITzvIe"}],"key":"tsLhM409ZY"}],"key":"TLxoUXliEG"}],"key":"a0yMTtuYL5"},"references":{"cite":{"order":["Norman_1995","Burchard_Levine_2021","Campbell_1998","Kljun_2015"],"data":{"Norman_1995":{"label":"Norman_1995","enumerator":"1","doi":"10.1016/0168-1923(95)02265-y","html":"Norman, J. M., Kustas, W. P., & Humes, K. S. (1995). Source approach for estimating soil and vegetation energy fluxes in observations of directional radiometric surface temperature. <i>Agricultural and Forest Meteorology</i>, <i>77</i>(3–4), 263–293. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1016/0168-1923(95)02265-y\">10.1016/0168-1923(95)02265-y</a>","url":"https://doi.org/10.1016/0168-1923(95)02265-y"},"Burchard_Levine_2021":{"label":"Burchard_Levine_2021","enumerator":"2","doi":"10.1111/gcb.16002","html":"Burchard‐Levine, V., Nieto, H., Riaño, D., Kustas, W. P., Migliavacca, M., El‐Madany, T. S., Nelson, J. A., Andreu, A., Carrara, A., Beringer, J., Baldocchi, D., & Martín, M. P. (2021). A remote sensing‐based three‐source energy balance model to improve global estimations of evapotranspiration in semi‐arid tree‐grass ecosystems. <i>Global Change Biology</i>, <i>28</i>(4), 1493–1515. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1111/gcb.16002\">10.1111/gcb.16002</a>","url":"https://doi.org/10.1111/gcb.16002"},"Campbell_1998":{"label":"Campbell_1998","enumerator":"3","doi":"10.1007/978-1-4612-1626-1","html":"Campbell, G. S., & Norman, J. M. (1998). <i>An Introduction to Environmental Biophysics</i>. Springer New York. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1007/978-1-4612-1626-1\">10.1007/978-1-4612-1626-1</a>","url":"https://doi.org/10.1007/978-1-4612-1626-1"},"Kljun_2015":{"label":"Kljun_2015","enumerator":"4","doi":"10.5194/gmd-8-3695-2015","html":"Kljun, N., Calanca, P., Rotach, M. W., & Schmid, H. P. (2015). A simple two-dimensional parameterisation for Flux Footprint Prediction (FFP). <i>Geoscientific Model Development</i>, <i>8</i>(11), 3695–3713. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.5194/gmd-8-3695-2015\">10.5194/gmd-8-3695-2015</a>","url":"https://doi.org/10.5194/gmd-8-3695-2015"}}}}}