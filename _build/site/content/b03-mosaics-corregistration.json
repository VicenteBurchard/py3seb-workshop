{"version":2,"kind":"Notebook","sha256":"d5030ffec41d855ecaae7632a5900f57fc27344fb43f0950b2a5bb6820715651","slug":"b03-mosaics-corregistration","location":"/B03-Mosaics_corregistration.ipynb","dependencies":[],"frontmatter":{"title":"Corregistration of UAV mosaics","short_title":"UAV corregistration","subtitle":"Notebook that shows a prototype method to automatically corregister airborne/UAV orthomomosaics","keywords":["UAV","TSEB","LST-NDVI space"],"authors":[{"nameParsed":{"literal":"Héctor Nieto","given":"Héctor","family":"Nieto"},"name":"Héctor Nieto","orcid":"0000-0003-4250-6424","email":"hector.nieto@ica.csic.es","affiliations":["Instituto de Ciencias Agrarias, ICA","CSIC"],"id":"contributors-Users\\06325897T\\Nextcloud\\1_Projects\\ILINK24\\Workshop_3SEB_UCDavis\\py3SEB-workshop\\B03-Mosaics_corregistration-generated-uid-0","corresponding":true},{"nameParsed":{"literal":"Benjamin Mary","given":"Benjamin","family":"Mary"},"name":"Benjamin Mary","orcid":"0000-0001-7199-2885","affiliations":["Insituto de Ciencias Agrarias","CSIC"],"id":"contributors-Users\\06325897T\\Nextcloud\\1_Projects\\ILINK24\\Workshop_3SEB_UCDavis\\py3SEB-workshop\\B03-Mosaics_corregistration-generated-uid-1"}],"affiliations":[{"id":"Instituto de Ciencias Agrarias, ICA","name":"Instituto de Ciencias Agrarias, ICA"},{"id":"CSIC","name":"CSIC"},{"id":"Insituto de Ciencias Agrarias","name":"Insituto de Ciencias Agrarias"}],"license":{"content":{"id":"CC-BY-SA-4.0","url":"https://creativecommons.org/licenses/by-sa/4.0/","name":"Creative Commons Attribution Share Alike 4.0 International","free":true,"CC":true}},"subject":"Tutorial","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"open_access":false,"github":"https://github.com/VicenteBurchard/py3SEB-workshop","numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"B03-Mosaics_corregistration.ipynb","url":"/B03-Mosaics_corregis-e6db424e0baa98eb49a077545cc3055d.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eTEZsp6bsy"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"C9bwBk7E5N"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This interactive Jupyter Notebook has the objective of showing one prototype method that automates the search of Ground Control Points between two UAV mosaics.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"sjEck4clz7"}],"key":"XPI5yTnZLF"}],"key":"EYf1Auuj8U"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Instructions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ckiPk7Dsbd"}],"identifier":"instructions","label":"Instructions","html_id":"instructions","implicit":true,"key":"qPz5mYIJ33"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Read carefully all the text and follow the instructions.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"uJdYH6vO58"}],"key":"F1C8Gf6A9y"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Once each section is read, run the jupyter code cell underneath (marked as ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"QjiIsFCcem"},{"type":"inlineCode","value":"In []","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"SQOtw0IpgJ"},{"type":"text","value":") by clicking the icon ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"QtixBZpVVM"},{"type":"inlineCode","value":"Run","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"z2Eym5h6Oc"},{"type":"text","value":", or pressing the keys SHIFT+ENTER of your keyboard. A graphical interface will then display, which allows you to interact with and perform the assigned tasks.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"XoRUb6ZIAP"}],"key":"v6a3d1IxZ3"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"To start, please run the following cell to import all the packages required for this notebook. Once you run the cell below, an acknowledgement message, stating all libraries were correctly imported, should be printed on screen.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"URAcVWOZ5d"}],"key":"eCT6Q92Psp"}],"key":"FsylW1NmFG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib inline\nfrom pathlib import Path\nfrom ipywidgets import interact, interactive, fixed, widgets\nfrom IPython.display import display\nimport numpy as np\nprint(\"Libraries imported correctly, you can continue to the next cells\")","key":"NU3hDoSZxK"},{"type":"output","id":"oX_6BByP-dH4vDRghyORm","data":[],"key":"ShiVkQa66N"}],"key":"i3r8A3lIep"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Corregistering orthomosaics","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Iqy4UvK0He"}],"identifier":"corregistering-orthomosaics","label":"Corregistering orthomosaics","html_id":"corregistering-orthomosaics","implicit":true,"key":"EDiINcXy2M"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In the previous exercise we saw how important is having well collocated UAV mosaicks between the TIR and spectral cameras. Not only for accurately extracting the soil and canopy temperatures, but for later be able to robustly parse the different canopy tratis and radiometric temperatures in TSEB.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"yfSn3brrDO"}],"key":"PAU6PS9aL7"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Althouh both phototgrametric software and UAV avionics/payloads have evolve a lot in the last years, it is not uncommon that the different orthomosaics generated from the different payload cameras do not perfectly match. This would involve the manual tasks of adding Ground Control Points, either with targets placed on ground or by indentifying distinctive patters in each mosaick.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"phJWIdudjE"}],"key":"PerzRMqn1E"},{"type":"admonition","kind":"important","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","key":"w3pDBj1nUL"}],"key":"F6Crn8O7SW"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This task can be tedious and time consuming, thus it woulc preclude the use of UAV imager in operational and/or near-real-time services.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jXbggU1JfN"}],"key":"rKGqbmgNs9"}],"key":"jCKT34k2TR"},{"type":"heading","depth":2,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"fDCb6nzgoO"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L18","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"gcp_tools in GitHub airborne_tools package","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"A9UjfDDbtK"}],"urlSource":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L18","data":{"kind":"file","org":"hectornieto","repo":"airborne_tools","reference":"5db17192e638c2745dea5d918b9dcaffd05a14cf","file":"airborne_tools/gcp_tools.py","from":18,"raw":"https://raw.githubusercontent.com/hectornieto/airborne_tools/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py"},"internal":false,"protocol":"github","key":"uHlbqIUZXE"}],"identifier":"the-gcp-tools-in-github-airborne-tools-package","label":"The gcp_tools in GitHub airborne_tools package","html_id":"the-gcp-tools-in-github-airborne-tools-package","implicit":true,"key":"YCtCoizHJT"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"For that reason, we have developed a prototype that aims to automatize the corregistration of orthomosaics. This prototype aims to collocate an orthomosaic","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"z4ah73IK6T"},{"type":"footnoteReference","identifier":"1","label":"1","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"enumerator":"1","key":"JiSNKoozA0"},{"type":"text","value":" (from now on we will call it the ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"DliFcBgJTM"},{"type":"inlineCode","value":"slave","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"YFm8gL8stW"},{"type":"text","value":") over another orthomosaic or image that is considered as ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"CUfCrIZkpd"},{"type":"inlineCode","value":"reference","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"VlS5duFXVF"},{"type":"text","value":".","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"a4IlRjuVfn"}],"key":"il33Geys6H"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"llRCt2wBt8"}],"key":"WtijqhWgqB"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"gzI8ONgFKG"},{"type":"inlineCode","value":"reference","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"AltrELqat1"},{"type":"text","value":" image can be a well georreferenced orthomosaic such as an RGB UAV mosaic, an aerial orthoimage or any other dataset. Indeed the ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"UrQcG8CLF6"},{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"scale/resolution between the ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"QfUWwJ7fnc"},{"type":"inlineCode","value":"reference","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"hSUeqdtIMj"},{"type":"text","value":" and the ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"jG7thxrtIN"},{"type":"inlineCode","value":"slave","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"COS0Ti644f"},{"type":"text","value":" mosaic to be collocated does not need to be the same","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"dsyybJjwdY"}],"key":"Ja0vJ3lDmq"}],"key":"UFTVzfPWH4"}],"key":"EFlBMswOgo"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Basically we are using SIFT ","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"TEJjwBYX6V"},{"type":"citeGroup","kind":"parenthetical","children":[{"type":"cite","kind":"parenthetical","label":"Lowe_2004","identifier":"https://doi.org/10.1023/b:visi.0000029664.99615.94","children":[{"type":"text","value":"Lowe, 2004","key":"Kjt6v5lyaJ"}],"enumerator":"1","key":"r9ZFRS7FBX"}],"key":"jQP5vwif0j"},{"type":"text","value":" algorithm to find relevant features in each image, followed by FLANN ","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"ejyTlcAlCv"},{"type":"citeGroup","kind":"parenthetical","children":[{"type":"cite","kind":"parenthetical","label":"Muja_2014","identifier":"https://doi.org/10.1109/tpami.2014.2321376","children":[{"type":"text","value":"Muja & Lowe, 2014","key":"mEFucYNMMG"}],"enumerator":"2","key":"WwwDJgslcl"}],"key":"tBnAjrUsor"},{"type":"text","value":" algorithm to evaluate the similarities of features between both images (reference and slave) and find feature mathing in both images, which will be the ones considered as potential Ground Control Points (","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"DneBPimXVi"},{"type":"inlineCode","value":"GCP","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"POAtDgURJg"},{"type":"text","value":"s).","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"sm2A6nZwgp"}],"key":"PUTCEdklbH"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"kLTZgyt5UW"}],"key":"jiY2VLwuhY"},{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Indeed SIFT+FLANN are the typical algorithms that photogrammetric software uses to peform the matching and overlapping between snapshots, pior to building the photogrammetric point cloud.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"HxWY0GbitG"}],"key":"axbMZpZvEZ"}],"class":"drowpdown","key":"xiQOVG4iYy"},{"type":"heading","depth":3,"position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Dataset","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"tjuRdWP2Nc"}],"identifier":"dataset","label":"Dataset","html_id":"dataset","implicit":true,"key":"HZ9BzH6bYk"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"For this exercise we will use the test example of ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"gcRTPoh0ie"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"airborne_tools package","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"vDZivqJyjA"}],"urlSource":"https://github.com/hectornieto/airborne_tools","error":true,"key":"wtWinRGQ8T"},{"type":"text","value":". The data is already located at the ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"LdEryceQij"},{"type":"link","url":"./input/UAV","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"./input/UAV","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"fZOq6PCc6h"}],"urlSource":"./input/UAV","key":"bYyw7Ew3uh"},{"type":"text","value":" folder. It consists of a UAV flight over an experimental vineyard located near Madrid (Spain) that acquired (among others):","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"rWBKpmccYj"}],"key":"LP0DnCbZCV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":28,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":28,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"A multispectral image (","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"HAMQ1EqvQS"},{"type":"link","url":"/Sequoia_vnir_2022091-ceacc3bb28b3fe52ea8e5ff087e5e6d5.tif","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Sequoia​_vnir​_20220916​.tif","key":"ELwti1AkJE"}],"urlSource":"./input/UAV/Sequoia_vnir_20220916.tif","static":true,"protocol":"file","key":"dcb3TPCGCP"},{"type":"text","value":") with the following bands:","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"jFyWKGDNGb"}],"key":"E39wmBJ5zy"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":30,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Green","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"DyvVq7krHf"}],"key":"in2ZSu3ziQ"},{"type":"listItem","spread":true,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Red","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"hNGRJ0fJ5E"}],"key":"EQg5REidm2"},{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Red-edge","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"zWig5ZKZBb"}],"key":"zEmbpHOYJJ"},{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Near Infrared","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"ketPxvsxN8"}],"key":"C0riKVkI04"}],"key":"dxSFBBv2zL"}],"key":"WcLvWrjKwD"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"A thermal image (","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"bZPQdXv0PD"},{"type":"link","url":"/tir_odm_20220916-944e82159a035f3a9d97af6cf329b316.tif","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"tir​_odm​_20220916​.tif","key":"xrJKPNnmfP"}],"urlSource":"./input/UAV/tir_odm_20220916.tif","static":true,"protocol":"file","key":"F4uuP8PLgX"},{"type":"text","value":")with temperatures in Kelvin, scaled by a factor of 100","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"ZA7vqdkiiL"}],"key":"lbaUsnrjC1"}],"key":"bbzYBDyESh"}],"key":"cet4lRIbbs"},{"type":"paragraph","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"We recommend you to open both images in QGIS to better browse them and be aware of the lack of corregistration between mosaics.","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"RreM75NVfb"}],"key":"GJLQ5a2BfG"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"zbsnr6hRbZ"}],"key":"RNWR3GfT5q"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"You can use the cars/pannels in the upper part of the scene as reference.","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"KPSlHpkoFO"}],"key":"CJejv4DJQc"}],"key":"dGHdwgbEP0"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Even the UAV was equipped with a RTK differential GPS and Ground Control Points were place on ground, you can still see some some displacements between mosaics.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"mcN1O1aUSM"}],"key":"oth0pbKUX4"},{"type":"heading","depth":3,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"Preprocess the mosaics","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"pMXS7JBKgD"}],"identifier":"preprocess-the-mosaics","label":"Preprocess the mosaics","html_id":"preprocess-the-mosaics","implicit":true,"key":"kR0htQIrdy"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"As an optional step we could do is to preprocess the mosaics. Either the ","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"QyC13iv441"},{"type":"inlineCode","value":"reference","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"hmrzNvcDUm"},{"type":"text","value":" or the ","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"C0CZ9zToe6"},{"type":"inlineCode","value":"slave","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"qDXWSnnaOo"},{"type":"text","value":". This could be usefull for multidimensional imagery such as multispectral/hyperspectral data, since SIFT algorithm only works for single-band grayscale or RGB pictures.","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"M3XjXXNKtB"}],"key":"JPUl4S57Py"},{"type":"paragraph","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"For this case we will reduce the multispectral ","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"aLVKO0LNZ7"},{"type":"inlineCode","value":"reference","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"QIJUcfSqPo"},{"type":"text","value":" scene to a single band brightness image, by applying a Principal Component Analysis, and selecting the first PCA, since this is the one that will","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"Oh58eYdBKb"}],"key":"fU7VeuvdUe"},{"type":"footnoteDefinition","identifier":"1","label":"1","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Or any other geospatial raster image such as satellite imagery.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"LhUbVULnNW"}],"key":"PMh5syW3df"}],"enumerator":"1","key":"fhZB91Uplf"}],"key":"yQVtFg4OF6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from airborne_tools import image_preprocessing as img\n\n# Set the input folder location and raw VNIR and output PCA single-band image\nworkdir = Path()\ntest_dir = workdir / \"input\" / \"UAV\"\n\n# Set the path to the input LST and VNIR images\nlst_file = test_dir / 'tir_odm_20220916.tif'\nvnir_image = test_dir / 'Sequoia_vnir_20220916.tif'\npca_image = test_dir / 'Sequoia_vnir_20220916_PC1.tif'\n\n# Set the nodata of the VNIR imager\nno_data=4294967296\n\n# We will use all the VNIR bands (4) to create the PCA image\nvnir_bands = [0, 1, 2, 3]\n\n# And we will save only the first PC band, considering that this component \npca_components = 1\n# We need to reduce the dimensionality of the master image to a single grayscale band.\n# We therefore apply a PCA reduction to get a grayscale image combining all spectral bands\nif not pca_image.exists():\n    img.pca(vnir_image,\n            no_data=no_data,\n            use_bands=vnir_bands,\n            pca_components=pca_components,\n            outfile=pca_image,\n            normalize=True)\n\nprint(f\"Created VNIR PCA image at {pca_image}\")","key":"gioNXngjCN"},{"type":"output","id":"taP20CtxppJd6hu1Ud4TD","data":[],"key":"gQw3HgJ7tu"}],"key":"XzzrcPqVYR"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"See Also","key":"TKuQMLVKdz"}],"key":"bKmxXQiokQ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can check the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FVrZxxEnhz"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/image_preprocessing.py#L9","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"PCA image reduction GitHub source code","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SzxsIw6f9M"}],"urlSource":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/image_preprocessing.py#L9","data":{"kind":"file","org":"hectornieto","repo":"airborne_tools","reference":"5db17192e638c2745dea5d918b9dcaffd05a14cf","file":"airborne_tools/image_preprocessing.py","from":9,"raw":"https://raw.githubusercontent.com/hectornieto/airborne_tools/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/image_preprocessing.py"},"internal":false,"protocol":"github","key":"T6orf8IYvQ"}],"key":"zbnFgKLZgK"}],"class":"dropdown","key":"W8lJf6Enbm"},{"type":"heading","depth":4,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Visualize both grayscale images","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"r9YAvNskYZ"}],"identifier":"visualize-both-grayscale-images","label":"Visualize both grayscale images","html_id":"visualize-both-grayscale-images","implicit":true,"key":"QCom4Dvb7R"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"You can now visualized the grayscale images for both the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"juAWGe7dIv"},{"type":"inlineCode","value":"reference","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"oNKSiKC4Ib"},{"type":"text","value":" VNIR PCA1 and the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"UJ7PzSwyUm"},{"type":"inlineCode","value":"slave","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"o677cCBLL4"},{"type":"text","value":" LST.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NrxQ7b4v8b"}],"key":"tddfZ5pSfw"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"HBnwtHVmvK"}],"key":"HudlWdnt81"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"You can also use QGIS to better visualize both images and confirm the corregistration issues between mosaics.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"luo0ZYNesA"}],"key":"iRCiGEzrwk"}],"key":"iTUYLcS3ou"}],"key":"hFzwF0u1tD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from osgeo import gdal\nfrom bokeh.plotting import *\nfrom bokeh import palettes as pal\nfrom bokeh.models.mappers import LinearColorMapper\nfrom bokeh.io import output_notebook\nfrom bokeh.resources import INLINE\noutput_notebook(resources=INLINE)\n\n# Open and read the LST file\nfid = gdal.Open(lst_file, gdal.GA_ReadOnly)\nlst = fid.GetRasterBand(1).ReadAsArray().astype(float)\n# Set LST NaN\nlst_no_data = 65535\nlst[lst == lst_no_data] = np.nan\n# Open and read the NDVI file\nfid = gdal.Open(pca_image, gdal.GA_ReadOnly)\npca = fid.GetRasterBand(1).ReadAsArray()\nmaster_geo = fid.GetGeoTransform()\ndel fid\n\nrows, cols = int(0.3 * lst.shape[0]), int(0.3 * lst.shape[1])\ns1 = figure(title=\"LST\", width=cols, height=rows, x_range=[0, cols], y_range=[0, rows])\ns1.axis.visible = False\ns1.image(image=[np.flipud(lst)], x=[0], y=[0], dw=cols, dh=rows)\ns2= figure(title=\"VNIR PCA1\", width=cols, height=rows, x_range=s1.x_range, y_range=s1.y_range)\ns2.axis.visible = False\ns2.image(image=[np.flipud(pca)], x=[0], y=[0], dw=[cols], dh=[rows])\n\np = gridplot([[s1], [s2]], toolbar_location='above')\nshow(p)","key":"ZhhQKWTTwA"},{"type":"output","id":"j-MP9GEtuypa5eaVfNEWt","data":[],"key":"fpO5ANNxxp"}],"key":"MJhVnWAG8x"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Look that the brightness patters seems to overal match, which will help SIFT+FLANN to find the matheces.\nFor instance,  within the grapevine that the brightest vines in the the LST (warmer temperatures) match with the lowest brighness in the PCA, these areas were under a more stressed deficit irrigation and thus both temperatures. However, some other areas have opposite brighness, such as the calibration pannels placed on top of the scenes, the warmest pannels (brightest in LST) are however the darkest (black painted) in the VNIR PCA1.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p0HlCI3y9I"}],"key":"o7AL1dz445"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Run SIFT + FLANN","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"wamC79yRpw"}],"identifier":"run-sift-flann","label":"Run SIFT + FLANN","html_id":"run-sift-flann","implicit":true,"key":"Faaq48kXbj"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Now that we have the data preprocess, we can run our SIFT and FLANN algorithms to find common features that we will be considered as potential GCPs. For this task we will use the powerful [OpenvCV] library, available in Python","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Djcxp2Um9I"},{"type":"footnoteReference","identifier":"2","label":"2","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"enumerator":"2","key":"cxeyjnFEta"},{"type":"text","value":", which, among many others, contains SIFT and FLANN methods:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"itfPrWGufM"}],"key":"iDAtua0O2g"},{"type":"footnoteDefinition","identifier":"2","label":"2","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"also in C++ and Java","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"tyiA8QyF1x"}],"key":"bfbLO3hBAu"}],"enumerator":"2","key":"MzAmyBtmPX"}],"key":"vUeuRHgEFc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Import Python OpenCV\nimport cv2\n# matching factor between keypoint descriptor\nmatch_factor = 0.80 \n\n# SIFT and FLANN needs to deal with 8bit images, so we need to rescale the floaging point input to 0-255 bit range\nmaster_scaled = img.scale_grayscale_image(pca, no_data=np.nan)\nslave_scaled = img.scale_grayscale_image(lst, no_data=np.nan)\n\n# Get the LST (slave) GDAL geotransform and projection\nfid = gdal.Open(lst_file, gdal.GA_ReadOnly)\nslave_geo = fid.GetGeoTransform()\nproj = fid.GetProjection()\ndel fid\n# Get the VNIR (master) GDAL geotransform and projection\nfid = gdal.Open(pca_image, gdal.GA_ReadOnly)\nmaster_geo = fid.GetGeoTransform()\nproj = fid.GetProjection()\ndel fid\n\n# Initiate SIFT detector\ndetector = cv2.SIFT_create()\n# We use NORM distance measurement for SIFT\nnorm_type = cv2.NORM_L1\n\nprint(\"Finding features and their descriptors, this might take a while...\")\nkp_master, des_master = detector.detectAndCompute(master_scaled, None)\nkp_slave, des_slave = detector.detectAndCompute(slave_scaled, None)\n\n# Find matches between slave and master descriptors\nmatcher = cv2.BFMatcher(norm_type)\n# Get the 2 best matches per feature\nmatches = matcher.knnMatch(des_master, des_slave, k=2)\n\nprint(f\"Found {len(matches)}, filtering by FLANN factor similarity of {match_factor}\")\n# Create a list of potential GCPs\ngcp_list = []\ngood_matches = []\nfor i, (m, n) in enumerate(matches):\n    # Only the most similar matches, based on FLANN match factor, are selected\n    if m.distance < match_factor * n.distance:\n        good_matches.append(m)\n        master_pt = np.float32(kp_master[m.queryIdx].pt)\n        # Get the projected map coordinates (X, Y) of the master\n        x_master, y_master = img.get_map_coordinates(float(master_pt[1]),\n                                                     float(master_pt[0]),\n                                                     master_geo)\n        # Get the image coordinates (row, col) of the slave\n        slave_pt = np.float32(kp_slave[m.trainIdx].pt)\n        gcp_list.append((x_master,\n                         y_master,\n                         float(slave_pt[1]),\n                         float(slave_pt[0])))\n\nprint(f\"Found {len(gcp_list)} potential GCPs\")","key":"ciplWly3DM"},{"type":"output","id":"8eQCNMxjuHxSsRovmwnGU","data":[],"key":"bKnls6ID0S"}],"key":"ZQe8qOx9in"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize the potential GCP","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GOOZBAcvpV"}],"identifier":"visualize-the-potential-gcp","label":"Visualize the potential GCP","html_id":"visualize-the-potential-gcp","implicit":true,"key":"WYs6SbvaHX"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We can now visualize all the matches found by SIFT+FLANN, according to the resemblance ratio we have just set:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Bbx2Eysdn1"}],"key":"mY2WTbS025"}],"key":"FztuAx56bC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from matplotlib import pyplot as plt\n#-- Draw matches\nimg_matches = np.empty((max(slave_scaled.shape[0], master_scaled.shape[0]), \n                        slave_scaled.shape[1] + master_scaled.shape[1], 3), \n                       dtype=np.uint8)\ncv2.drawMatches(master_scaled, kp_master, slave_scaled, kp_slave, good_matches, img_matches,\n                matchesThickness=10, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)\n#-- Show detected matches\nplt.imshow(img_matches)\nplt.show()","key":"goVV6Xkjox"},{"type":"output","id":"iKeNRWJu9jiWvCusWpu8j","data":[],"key":"mQCBoFZcO7"}],"key":"wWesmpZLxV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Filter GCP by translation distance","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MhsHAppm0M"}],"identifier":"filter-gcp-by-translation-distance","label":"Filter GCP by translation distance","html_id":"filter-gcp-by-translation-distance","implicit":true,"key":"lZZWMZR9t0"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Since we assume that a priori both orthomosaics were georreferenced, either the UAV avionics information, the use of in situ GCP, or both, we can consider that the displacment between the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"u9Y2YEgqux"},{"type":"inlineCode","value":"slave","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Sng4V64EaP"},{"type":"text","value":" and the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"lrzwdGrz2d"},{"type":"inlineCode","value":"master","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"g7Rwa5Tn6F"},{"type":"text","value":" should not be too large, and thus we could discard GCPs which translation vector is larger than a given distance","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EHQsMx35kK"}],"key":"xmIDlCHMOz"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"dWGeA852dT"}],"key":"vhUxjoHFGB"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For instance we can assume that the UAV GPS could have an unsistematic error of 10m and thus the displacement between mosaics should not be larger than this distance.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"sTK1Pwp45U"}],"key":"FZHAwlnTAn"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Or we can just browse both mosaics and evaluate the observed maximum displacement between mosaics","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"kzwQVUqreU"}],"key":"ol1xmFsULQ"}],"key":"tI9S5l0pFi"}],"key":"gqe4MfK8Sb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set a maximum translation distance between slave and master\ndist_threshold = 10\n\n# Convert the list of potential GCPs to a numpy array to make computations more effective\ngcp_list = np.asarray(gcp_list)\n\nif len(gcp_list.shape) == 1:\n    gcp_list = gcp_list.reshape(1, -1)\n\n# Get the GCP map coordinates (X, Y) from the slave image coordinates\nx_slave, y_slave = img.get_map_coordinates(gcp_list[:, 2], gcp_list[:, 3], slave_geo)\n# Compute the the distance between the slave map coordinates and the master map coordinates for each GCP\ndist = np.sqrt((x_slave - gcp_list[:, 0]) ** 2 + (y_slave - gcp_list[:, 1]) ** 2)\n# Keep only those GCPs whose distance is lower than the threshold we set\ngcp_list = gcp_list[dist <= dist_threshold]\n# Convert back the list of GPC to a Python list\ngcp_list = gcp_list.tolist()\ngood_matches = np.array(good_matches)[dist <= dist_threshold].tolist()\nprint(f'Got {len(gcp_list)} valid GPCs with a translation lower than {dist_threshold}m')","key":"TcathjfJ27"},{"type":"output","id":"1htBaPQQ8kLDwxX2nz4XE","data":[],"key":"gzMtZMnWzL"}],"key":"BSy08OJWXH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize the potential GCP filtered by distance","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"j9mOnE27Lx"}],"identifier":"visualize-the-potential-gcp-filtered-by-distance","label":"Visualize the potential GCP filtered by distance","html_id":"visualize-the-potential-gcp-filtered-by-distance","implicit":true,"key":"ryjUUutp8d"}],"key":"BsTQqr98BV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cv2.drawMatches(master_scaled, kp_master, slave_scaled, kp_slave, good_matches, img_matches,\n                matchesThickness=10, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)\n#-- Show detected matches\nplt.imshow(img_matches)\nplt.show()","key":"daR3RXXaI5"},{"type":"output","id":"BkgfWynSgL6ueR-GI_8bN","data":[],"key":"FtQynZbKTU"}],"key":"j20hoIrs52"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"See Also","key":"o1CbI9pqmt"}],"key":"xiWvxHZzCO"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can check ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yw2bMXrUmp"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L568","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this function in the GitHub source code","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EHhcbh9aeJ"}],"urlSource":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L568","data":{"kind":"file","org":"hectornieto","repo":"airborne_tools","reference":"5db17192e638c2745dea5d918b9dcaffd05a14cf","file":"airborne_tools/gcp_tools.py","from":568,"raw":"https://raw.githubusercontent.com/hectornieto/airborne_tools/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py"},"internal":false,"protocol":"github","key":"oXU99nbnRz"}],"key":"zZeIsEmTrM"}],"class":"dropdown","key":"Nk142a2oNs"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Remove GCPs that are too close each other","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"FjPZS1msGm"}],"identifier":"remove-gcps-that-are-too-close-each-other","label":"Remove GCPs that are too close each other","html_id":"remove-gcps-that-are-too-close-each-other","implicit":true,"key":"qzEcEQRdX0"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"On the other hand, we wanted to have well distributed GCPs across the whole image. Theferore we will discard GCPs that were very close to other GCPs, aiming to avoid overrepresnting one area over others:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"YNu7MtYBY4"}],"key":"QLD3xAvotO"}],"key":"NvW1ki7N5K"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set minimum distance in pixels that GCPs should be from other GCPs\npixel_threshold = 5\n\ngcps_good = []\nmatches_good = []\nfor i, gcp_test in enumerate(gcp_list):\n    good = True\n    if i == len(gcp_list) - 2:\n        continue\n    for j in range(i + 1, len(gcp_list)):\n        dist = np.sqrt((gcp_test[2] - gcp_list[j][2]) ** 2 + (gcp_test[3] - gcp_list[j][3]) ** 2)\n        if dist < pixel_threshold:  # GCPs closer to each other are discarded to avoid overfitting\n            good = False\n            break\n    if good:\n        gcps_good.append(gcp_test)\n        matches_good.append(good_matches[i])\n\ngcp_list = list(gcps_good)\ngood_matches = list(matches_good)\nprint(f'Got {len(gcp_list)} valid GPCs far enough from each other by a distance of {dist_threshold} pixels')","key":"nlurKInria"},{"type":"output","id":"mJevtMYJ3bQOH_5nu9VO6","data":[],"key":"YTklqsD0MK"}],"key":"f2qiyT64gq"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize the filtered GCP","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UYpyJgNUNW"}],"identifier":"visualize-the-filtered-gcp","label":"Visualize the filtered GCP","html_id":"visualize-the-filtered-gcp","implicit":true,"key":"cTbOrArE8L"}],"key":"hd6EcMNmaA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cv2.drawMatches(master_scaled, kp_master, slave_scaled, kp_slave, good_matches, img_matches,\n                matchesThickness=10, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)\n#-- Show detected matches\nplt.imshow(img_matches)\nplt.show()","key":"qCyRDmbqi8"},{"type":"output","id":"T6wHKfXYV-gIZv9KCCWHw","data":[],"key":"gYdByHb5qo"}],"key":"LWk46g4HGr"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"See Also","key":"tr6VxuGdYB"}],"key":"SwzKtEOO7D"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can check ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sXDq66n22v"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L594","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this function in the GitHub source code","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YVAKPu9Zsb"}],"urlSource":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L594","data":{"kind":"file","org":"hectornieto","repo":"airborne_tools","reference":"5db17192e638c2745dea5d918b9dcaffd05a14cf","file":"airborne_tools/gcp_tools.py","from":594,"raw":"https://raw.githubusercontent.com/hectornieto/airborne_tools/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py"},"internal":false,"protocol":"github","key":"KOMrUBIPvi"}],"key":"y7jaEvRdt5"}],"class":"dropdown","key":"NIP54gyYwC"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Remove GCPs that are outliers in a 3rd degree polynomial warp","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"a1LqpSo4DI"}],"identifier":"remove-gcps-that-are-outliers-in-a-3rd-degree-polynomial-warp","label":"Remove GCPs that are outliers in a 3rd degree polynomial warp","html_id":"remove-gcps-that-are-outliers-in-a-3rd-degree-polynomial-warp","implicit":true,"key":"Th4Q5sjD0L"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"To finalize, we will discard all the GCPs that are outliers after fitting at 3rd degree polynomial warp","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"xVu5GntDs4"}],"key":"Rk470bMnVv"}],"key":"xVICFFFVYg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set a warping error threshold of 2.5 cm\nwarp_threshold = 0.025\n\n# Convert the list of GPCs to a python numpy array to vectorize the calculations\ngcps = np.asarray(gcp_list)\ngood_matches = np.asarray(good_matches)\n\n# Create our 3rd degree polynomial warping helper function\ndef _fit_polynomial_warp(gcps):\n\n    gcps = np.asarray(gcps)\n    if gcps.shape[0] < 15:\n        return None, None\n    rows = gcps[:, 2]\n    cols = gcps[:, 3]\n    rows2 = rows ** 2\n    cols2 = cols ** 2\n    rowscols = rows * cols\n    rows2cols = rows ** 2 * cols\n    rowscols2 = rows * cols ** 2\n    rows3 = rows ** 3\n    cols3 = cols ** 3\n\n    x = np.matrix([np.ones(rows.shape), rows, cols, rowscols, rows2, cols2, rows2cols, rowscols2, rows3, cols3]).T\n    map_x = gcps[:, 0].reshape(-1, 1)\n    map_y = gcps[:, 1].reshape(-1, 1)\n    theta_x = (x.T * x).I * x.T * map_x\n    theta_y = (x.T * x).I * x.T * map_y\n    return np.asarray(theta_x).reshape(-1), np.asarray(theta_y).reshape(-1)\n\n\n# Create our helper function to compute the warping error for each GCP\ndef _calc_warp_erors(gcps, theta_x, theta_y):\n    def _polynomial_warp(rows, cols, theta_x, theta_y):\n        x = theta_x[0] + theta_x[1] * rows + theta_x[2] * cols + theta_x[3] * rows * cols + theta_x[4] * rows ** 2 + \\\n            theta_x[5] * cols ** 2 + theta_x[6] * rows ** 2 * cols + theta_x[7] * rows * cols ** 2 + \\\n            theta_x[8] * rows ** 3 + theta_x[9] * cols ** 3\n        y = theta_y[0] + theta_y[1] * rows + theta_y[2] * cols + theta_y[3] * rows * cols + theta_y[4] * rows ** 2 + \\\n            theta_y[5] * cols ** 2 + theta_y[6] * rows ** 2 * cols + theta_y[7] * rows * cols ** 2 + \\\n            theta_y[8] * rows ** 3 + theta_y[9] * cols ** 3\n        return x, y\n\n    gcps = np.asarray(gcps)\n    if len(gcps.shape) == 1:\n        gcps = gcps.reshape(1, -1)\n\n    rows = gcps[:, 2]\n    cols = gcps[:, 3]\n    x_model, y_model = _polynomial_warp(rows, cols, theta_x, theta_y)\n    error = np.sqrt((x_model - gcps[:, 0]) ** 2 + (y_model - gcps[:, 1]) ** 2)\n    return error\n\n# FIt a 3rd order polynomial warp\ntheta_x, theta_y = _fit_polynomial_warp(gcps)\nerror = _calc_warp_erors(gcps, theta_x, theta_y)\nwhile np.max(error) > warp_threshold and len(error) > 30:\n    index = error.argsort()[::-1]\n    gcps = gcps[index[1:]]\n    good_matches = good_matches[index[1:]]\n    theta_x, theta_y = _fit_polynomial_warp(gcps)\n    error = _calc_warp_erors(gcps, theta_x, theta_y)\n\ngcp_valid = list(gcps)\ngood_matches = list(good_matches)\nprint(f'Got {len(gcp_valid)} valid GPCs that fit well in a 3rd degree polynomial warp')","key":"iVHUMyiBNY"},{"type":"output","id":"fRFYrApmfJkeqCIUOjhRb","data":[],"key":"hM3OQYyMiS"}],"key":"qcIrhzBOM0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize the filtered GCPs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ePoB1hxK48"}],"identifier":"visualize-the-filtered-gcps","label":"Visualize the filtered GCPs","html_id":"visualize-the-filtered-gcps","implicit":true,"key":"b0QWH11EIb"}],"key":"L7ZjKtgPyu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cv2.drawMatches(master_scaled, kp_master, slave_scaled, kp_slave, good_matches, img_matches,\n                matchesThickness=10, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)\n#-- Show detected matches\nplt.imshow(img_matches)\nplt.show()","key":"lOxsZD9Oki"},{"type":"output","id":"1Cd6_0vhP8WjxwNaOnePR","data":[],"key":"wsRRTd2tdx"}],"key":"huFGKDVU21"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"See Also","key":"QaCwF0ISqS"}],"key":"QQxDjg8uyM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can check ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ft18nLI7G2"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L761","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this function in the GitHub source code","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MzDTctY2cW"}],"urlSource":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L761","data":{"kind":"file","org":"hectornieto","repo":"airborne_tools","reference":"5db17192e638c2745dea5d918b9dcaffd05a14cf","file":"airborne_tools/gcp_tools.py","from":761,"raw":"https://raw.githubusercontent.com/hectornieto/airborne_tools/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py"},"internal":false,"protocol":"github","key":"XFEwf8mHuR"}],"key":"cAfxQTmaOk"}],"class":"dropdown","key":"timGM9yOEW"},{"type":"heading","depth":3,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Create and save the new collocated ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"IrPmIa0kPA"},{"type":"inlineCode","value":"slave","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dozLYnCh4r"},{"type":"text","value":" image","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"fchEyQNvpO"}],"identifier":"create-and-save-the-new-collocated-slave-image","label":"Create and save the new collocated slave image","html_id":"create-and-save-the-new-collocated-slave-image","implicit":true,"key":"TCp8Lmouuh"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"After running the cell below a new image will be saved in the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"OUyAVA8TPi"},{"type":"inlineCode","value":"/input/UAV","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"SexDY5qMtm"},{"type":"text","value":" folder, with suffix ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"jBEi8kcFMM"},{"type":"inlineCode","value":"_collocated.tif","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"mmVoTX6kIT"},{"type":"text","value":". You can visualize the results on QGIS. In addition, in the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"N9SZGGUAa2"},{"type":"inlineCode","value":"/input/UAV/GCS","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"sd4bgVuXqd"},{"type":"text","value":" you will have access to an ASCII table that summarizes the automatic GCPs found, and a line shapefile that represents the traslation vector from the original ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"BJkDLRwc4l"},{"type":"inlineCode","value":"slave","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"bBxRE8O0DW"},{"type":"text","value":" GCP coordinate to its corresponding coordinate in the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"GHyBzLSgHs"},{"type":"inlineCode","value":"reference","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"sOsX9X3VoV"},{"type":"text","value":".","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"tEcBE3AKtc"}],"key":"gm5Rn8XEsh"}],"key":"O4kGp9vWvq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from airborne_tools import gcp_tools as gcp\n# Set transformation method\n# 0 for thin plate spline transformation, \n# 1 for 1st degree polynomial\n# 2 for 2nd degree polynomial\n# ...\ntransform = 0  \n\n# Set the extent for the output image equal as the master image\nxmin, ymax = img.get_map_coordinates(0, 0, master_geo)\nxmax, ymin = img.get_map_coordinates(master_scaled.shape[1], master_scaled.shape[0], master_geo)\noutput_extent = (xmin, ymin, xmax, ymax)\n\ncollocated_image = test_dir / 'tir_odm_20220916_collocated.tif'\n\n# Get the origial GCP map coordinates\nslave_xcoord, slave_yCoord = img.get_map_coordinates(np.asarray(gcp_valid)[:, 2],\n                                                     np.asarray(gcp_valid)[:, 3],\n                                                     slave_geo)\n\n# Create an anciillary GCP subfolder to store the final GPCs\nif not (test_dir / \"GCPs\").is_dir():\n    (test_dir / \"GCPs\").mkdir(parents=True)\n\n# Save the transformation line vector betwen the original coordinates and the collocated coordiantes\noutshapefile = test_dir / 'GCPs' / f\"{collocated_image.name[:-4]}_Transform.shp\"\ngcp._write_transformation_vector((slave_xcoord, slave_yCoord),\n                                 (np.asarray(gcp_valid)[:, 0], np.asarray(gcp_valid)[:, 1]),\n                                 outshapefile,\n                                 proj)\n\n# Write the GCP to ascii file\nouttxtfile = test_dir / 'GCPs' / f\"{collocated_image.name[:-4]}_GCPs.txt\"\ngcp.gcps_to_ascii(gcp_valid, outtxtfile)\n\n# Finally use a airbone_tools helper function to perform the reprojection with the GCPs\ngcp.warp_image_with_gcps(lst_file,\n                         gcp_valid,\n                         collocated_image,\n                         output_extent=None,\n                         src_no_data=lst_no_data,\n                         transform=transform,\n                         data_type=gdal.GDT_UInt16)\n\nprint(f\"Saved collocated image in f{collocated_image}\")","key":"FfxbnYNTgd"},{"type":"output","id":"FafTIdaUVl3EVWaxZDJV6","data":[],"key":"GIUhy1spnD"}],"key":"ksxepEGTpl"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"See Also","key":"RIrYhB519M"}],"key":"h6C5ly0WkE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can check the full code in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZjYCb0XlIj"},{"type":"link","url":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L18","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"airborne_tools GitHub source code repository","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XuOCPCuzo4"}],"urlSource":"https://github.com/hectornieto/airborne_tools/blob/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py#L18","data":{"kind":"file","org":"hectornieto","repo":"airborne_tools","reference":"5db17192e638c2745dea5d918b9dcaffd05a14cf","file":"airborne_tools/gcp_tools.py","from":18,"raw":"https://raw.githubusercontent.com/hectornieto/airborne_tools/5db17192e638c2745dea5d918b9dcaffd05a14cf/airborne_tools/gcp_tools.py"},"internal":false,"protocol":"github","key":"Mrqgf94pKA"}],"key":"hNSVK8rgbT"}],"class":"dropdown","key":"Zja5ZckUNi"},{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"sBECIHqWDm"}],"key":"v5Vyv26XMJ"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Have a look in QGIS at the collocated TIR image comapred to the uncorrected TIR and Sequoia Multispectral image to visualize the colocation change.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"jRBWwcib3j"}],"key":"rlqaiH2aE9"}],"key":"Kt0rdy4S5h"}],"key":"EPxtN9gFzC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QPxJShF90X"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"yA4NY43zla"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We introduced an automatic method to corregister two mosaics","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tznS4XVhKy"}],"key":"ilWaS8JxXR"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This method does not require that both mosaics share the same resolution nor the same extension, as SIFT tries to find scale-invariant features in the images.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TkKVQFg3g3"}],"key":"juzD0aYBb0"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"After running SIFT+FLANN we run serveral filter criteria in order to use only the best GCPs.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"r7iXXv7ojQ"}],"key":"h2GsKJCmSA"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"[...]","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HcFxWsKrRd"}],"key":"m8DnMolFJL"}],"key":"qkfHXGmcDF"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"XcQXb9qidK"}],"key":"R7F5y2hy0w"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Please feel free to comment any thoughts. This is work in progress!!!","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"nWXg9Kp2hR"}],"key":"KWXkN1gzTv"}],"key":"UzB2kfx8xM"}],"key":"vsOukLT5Qj"}],"key":"lH4DEXd6a5"},"references":{"cite":{"order":["Lowe_2004","Muja_2014"],"data":{"Lowe_2004":{"label":"Lowe_2004","enumerator":"1","doi":"10.1023/b:visi.0000029664.99615.94","html":"Lowe, D. G. (2004). Distinctive Image Features from Scale-Invariant Keypoints. <i>International Journal of Computer Vision</i>, <i>60</i>(2), 91–110. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1023/b:visi.0000029664.99615.94\">10.1023/b:visi.0000029664.99615.94</a>","url":"https://doi.org/10.1023/b:visi.0000029664.99615.94"},"Muja_2014":{"label":"Muja_2014","enumerator":"2","doi":"10.1109/tpami.2014.2321376","html":"Muja, M., & Lowe, D. G. (2014). Scalable Nearest Neighbor Algorithms for High Dimensional Data. <i>IEEE Transactions on Pattern Analysis and Machine Intelligence</i>, <i>36</i>(11), 2227–2240. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1109/tpami.2014.2321376\">10.1109/tpami.2014.2321376</a>","url":"https://doi.org/10.1109/tpami.2014.2321376"}}}}}